###############################################################################
# Copyright (c) 2000, 2003 IBM Corporation and others.
# All rights reserved. This program and the accompanying materials 
# are made available under the terms of the Common Public License v1.0
# which accompanies this distribution, and is available at
# http://www.eclipse.org/legal/cpl-v10.html
# 
# Contributors:
#     IBM Corporation - initial API and implementation
###############################################################################
#
# PDE plugin.xml resources
#
name = Plug-in Development UI
provider-name = Eclipse.org
expoint.projectGenerators.name=Plug-in content wizards
expoint.newExtension.name=Extension wizards
expoint.newExtensionPoint.name=Extension point wizards
expoint.templates.name = Extension Templates
expoint.schemaMap.name=Schema mappings
expoint.source.name = Source Locations

perspective.name=Plug-in Development

preferences.main.name= Plug-In Development
preferences.target.name = Target Platform
preferences.targetEnv.name = Target Environment
preferences.buildpath.name = Java Build Path Control
preferences.source.name = Source Code Locations
preferences.compilers.name = Compilers
preferences.editor.name = Editors

binaryFilter.name = Binary plug-in and feature projects
binaryFilter.desc = Hides Java projects created by importing Eclipse plug-ins \
as binary (no source code)

new.category.name=Plug-in Development
new.pluginProject.name=Plug-in Project
new.pluginProject.description=Create a Plug-in Project
new.fragmentProject.name=Fragment Project
new.fragmentProject.description=Create a Plug-in Fragment Project
new.schemaFile.name = Extension Point Schema
new.schemaFile.description = Create an Extension Point Schema File
new.convert.name= Convert Java to Plug-in Projects
new.convert.description=Create a Plug-in project by converting an existing Java project.
new.feature.name=Feature Project
new.feature.description=Create a Feature project
new.site.name=Update Site Project
new.site.description=Create an Update Site project

PluginImportWizard.label=External Plug-ins and Fragments
PluginImportWizard.description=Create projects from plug-ins and fragments in the file system.

FeatureImportWizard.label=External Features
FeatureImportWizard.description=Create projects from features in the file system as part of \
in conjunction with the feature-based launching.

PluginSearchPage.label = Plug-in Search
PluginSearch.references = References

PluginExportWizard.label=Deployable plug-ins and fragments
PluginExportWizard.description=Export the selected plug-ins and/or fragments \
in a form suitable for deploying in an Eclipse product.

FeatureExportWizard.label=Deployable features
FeatureExportWizard.description=Export the selected features \
in a form suitable for deploying in an Eclipse product.

DependencyExtent.type = &Type


### Individual extension templates ############
template.helloWorld.name = Sample Action Set
template.helloWorld.desc = This template creates a simple action set \
that adds <b>Sample Menu</b> to the menu bar and a button to \
the tool bar. Both the menu item in the new menu and the button \
invoke the same <b>Sample Action</b>. Its role is to open a \
simple message dialog with a message of your choice.

template.perspectiveExtensions.name = Sample Perspective Extensions
template.perspectiveExtensions.desc = This template creates extensions to \
the target perspective.  It adds a view shortcut, a wizard shortcut, a perspective \
shortcut, an action set and a view to the target perspective.

template.propertyPages.name = Sample Property Page
template.propertyPages.desc = This template adds a property page to a resource and will \
appear in the Properties Dialog for that resource.  This property page can be used to view \
and set application-specific properties of a resource.

template.editor.name = Sample XML Editor
template.editor.desc = This template creates a basic XML editor.  It has all the basic functions \
of an editor, such as cut, copy, paste, find, etc.  It also has syntax highlighting and supports double-clicking.


template.popupMenus.name = Sample Popup Menu
template.popupMenus.desc = This template adds a submenu and a new action to a target object's \
popup menu.  This contribution will appear in all viewers where an object of the specified type \
is selected.

template.view.name = Sample View
template.view.desc = This template creates a workbench view. \
The view is contributed to the workbench by \
creating a category. The view can be opened by selecting \
<b>Window</b>, <b>Show View</b> and then <b>Other...</b> \
on the menu bar. The template offers several choices including \
pop-up menu support, local tool bar, double-click, sorting and \
filtering. The view can be configured to react to changes \
elsewhere in the workbench.

template.multiPageEditor.name = Multi-page Editor
template.multiPageEditor.desc = This template creates a \
multi-page editor. It works on text files with the chosen extension. \
The editor has three pages: <b>Edit</b> where you enter text, \
<b>Properties</b> that allows you to change font of the result \
and <b>Preview</b> that shows sorted words from the <b>Edit</b> page \
using the font set in <b>Properties</b>. To open the editor, choose \
<b>File</b>, <b>New</b> then <b>Other...</b> from the menu bar. \
In the "Simple" category, choose to create a new file. Use any file \
name, but use the extension the editor is registered for (*.mpe by \
default).

template.newWizard.name = New File Wizard
template.newWizard.desc = This template creates a \
wizard that can create a new file in the workspace. It is designed to \
generate files that can be opened by a <b>Multi-Page Editor</b>. \
To test the wizard, select <b>File</b>, \
<b>New</b> then <b>Other...</b> from the menu bar. When the master \
wizard opens, select the created category and the new wizard registered \
for that category. Make sure that the chosen extension matches \
the extension the multi-page editor is registered for (*.mpe by \
default).

template.preferences.name = Preference Page
template.preferences.desc = This template creates a \
page that is contributed to the Preferences. It demonstrates how \
to create common preference fields and how to save and restore \
values between invocations. To see the result, select \
<b>Window</b> then <b>Preferences...</b> from the menu bar.

template.help.name = Sample Help Table of Contents
template.help.desc = This template creates a Help table of contents. \
If this table is set to primary, it can be standalone, or integrated \
into pre-set categories. If the table is not set to primary, it can \
optionally be integrated into a primary table of contents for testing. 

projectGenerators.defaultPlugin.name= Default Plug-In Structure
projectGenerators.defaultPlugin.description=Generates plug-in \
manifest (plugin.xml) and plug-in top-level Java class. \
When finished, the wizard will open plug-in manifest editor. \
The plug-in will be ready to work, compile and run, but will \
contain no extensions.
projectGenerators.defaultFragment.name= Default Fragment Structure
projectGenerators.defaultFragment.description=<p>Generates fragment \
manifest (fragment.xml). \
When finished, the wizard will open fragment manifest editor. \
The fragment will be ready to work, compile and run, but will \
contain no extensions.</p>\
<p><b>Note</b>: Fragments are additions to plug-ins. You must \
know the plug-in you intend to target before creating a fragment.</p>

projectGenerators.helloWorld.name = Hello, World
projectGenerators.helloWorld.description=\
<p>This wizard creates standard plug-in directory structure and \
adds the following:</p>\
<li><b>Action set</b>. %template.helloWorld.desc%</li>\
<p><b>Extensions Used</b></p>\
<li>org.eclipse.ui.actionSets</li>

projectGenerators.perspectiveExtensions.name = Plug-in with perspective extensions
projectGenerators.perspectiveExtensions.description=\
<p>This wizard creates standard plug-in directory structure and \
adds the following:</p>\
<li><b>Perspective Extensions</b>. %template.perspectiveExtensions.desc%</li>\
<p><b>Extensions Used</b></p>\
<li>org.eclipse.ui.perspectiveExtensions</li>

projectGenerators.propertyPages.name = Plug-in with a property page
projectGenerators.propertyPages.description=\
<p>This wizard creates standard plug-in directory structure and \
adds the following:</p>\
<li><b>Property Page</b>. %template.propertyPages.desc%</li>\
<p><b>Extension Used</b></p>\
<li>org.eclipse.ui.propertyPages</li>

projectGenerators.popupMenus.name = Plug-in with a popup menu
projectGenerators.popupMenus.description=\
<p>This wizard creates a standard plug-in directory structure and \
adds the following:</p>\
<li><b>Popup Menu</b>. %template.popupMenus.desc%</li>\
<p><b>Extension Used</b></p>\
<li>org.eclipse.ui.popupMenus</li>

projectGenerators.editor.name = Plug-in with an editor
projectGenerators.editor.description=\
<p>This wizard creates standard plug-in directory structure and \
adds the following:</p>\
<li><b>Editor</b>. %template.editor.desc%</li>\
<p><b>Extension Used</b></p>\
<li>org.eclipse.ui.editors</li>

projectGenerators.view.name = Plug-in with a view
projectGenerators.view.description=\
<p>This wizard creates standard plug-in directory structure and \
adds the following:</p>\
<li><b>Sample view</b>. %template.view.desc%</li>\
<p><b>Extensions Used</b></p>\
<li>org.eclipse.ui.views</li>

projectGenerators.multiPageEditor.name = Plug-in with a multi-page editor
projectGenerators.multiPageEditor.description=\
<p>This wizard creates standard plug-in directory structure and \
adds the following:</p>\
<li><b>Sample Multi-page Editor</b>. %template.multiPageEditor.desc%</li>\
<li><b>Sample New Wizard</b>. %template.newWizard.desc%</li>\
<p><b>Extensions Used</b></p>\
<li>org.eclipse.ui.editors</li>\
<li>org.eclipse.ui.newWizards</li>

projectGenerators.choice.name = Custom plug-in wizard
projectGenerators.choice.description=This wizard creates standard \
plug-in directory structure and provides for choosing additional \
content from a list of templates.

editors.pluginManifest.name = Plug-in Manifest Editor
editors.fragmentManifest.name = Fragment Manifest Editor
editors.schema.name = Extension Point Schema Editor
editors.pluginJars.name = Plugin/Fragment JARs Editor
editors.buildProperties.name = Build Properties Editor
editors.featureManifest.name = Feature Manifest Editor
editors.siteManifest.name = Site Manifest Editor

views.category.name = PDE
views.plugins.name = Plug-ins
views.dependencies.name = Plug-in Dependencies

natures.pluginNature.name= Plug-in Development
natures.featureNature.name= Feature Development

builders.manifestBuilder.name = Plug-in Manifest Builder
builders.schemaBuilder.name = Extension Point Schema Builder
builders.featureBuilder.name = Feature Manifest Builder

newExtension.templates = Extension Templates
newExtension.templates.hello.name = "Hello, World" action set
newExtension.templates.hello.desc = <p>%template.helloWorld.desc%</p>

newExtension.templates.view.name = Sample View
newExtension.templates.view.desc = <p>%template.view.desc%</p>

newExtension.templates.multiPageEditor.name = Multi-page Editor
newExtension.templates.multiPageEditor.desc = <p>%template.multiPageEditor.desc%</p>

newExtension.templates.newWizard.name = New File Wizard
newExtension.templates.newWizard.desc = <p>%template.newWizard.desc%</p>

newExtension.templates.preferences.name = Preference Page
newExtension.templates.preferences.desc = <p>%template.preferences.desc%</p>

newExtension.templates.perspectiveExtensions.name = Perspective Extension
newExtension.templates.perspectiveExtensions.desc = <p>%template.perspectiveExtensions.desc%</p>

newExtension.templates.propertyPages.name = Property Page
newExtension.templates.propertyPages.desc = <p>%template.propertyPages.desc%</p>

newExtension.templates.editor.name = Editor
newExtension.templates.editor.desc = <p>%template.editor.desc%</p>

newExtension.templates.popupMenus.name = Popup Menu
newExtension.templates.popupMenus.desc = <p>%template.popupMenus.desc%</p>

newExtension.templates.help.name = Help Content
newExtension.templates.help.desc = <p>%template.help.desc%</p>

newExtension.generic = Generic Wizards
newExtension.generic.name = Schema-based Extension
newExtension.generic.desc = <p>Adds a new extension based \
on its schema information. If the extension point schema (definition) \
can be found, you will be able to create the correct child elements \
by choosing <b>New</b> on the pop-up menu while the parent element \
is selected. The property sheet will show expected attributes for \
each element and will use cell editor appropriate for the attribute \
type.</p>\
<p>If the extension point definition cannot be found, you will still \
be able to add or remove attributes but they will all be treated as \
text and there will be no constraints on their names or number.</p>


popupMenus.createJar.label = Create Ant &Build File
popupMenus.buildFragment.label = Create Ant &Build File
popupMenus.buildPlugin.label = Create Ant &Build File

UpdateClasspathAction.label= &Update Classpath...
UpdateClasspathAction.description=Updates classpath with the settings specified in the manifest files

OpenDependenciesAction.label= Ope&n Dependencies
OpenDependenciesAction.description=Show plug-in dependencies in the Plug-in Dependencies view

newlauncher.regular.label= Run-time Workbench (without wizard)
newlauncher.regular.description = Immediately launches a new instance of the workbench 
newlauncher.withWizard.label= Run-time Workbench
newlauncher.withWizard.description = Launches the workbench launcher wizard 

launcher.shortcut.label= Run-time Workbench

launchConfigurationType.name = Run-time Workbench
launchConfigurationTab.firstTab.name = Arguments
launchConfigurationTab.advancedTab.name = Plug-ins and Fragments
launchConfigurationTab.tracingTab.name = Tracing Options

decorator.label = Binary Plug-in Projects
decorator.desc = Decorates plug-in projects imported using \
'External Plug-ins and Fragments' wizard, allowing you to \
differentiate between binary and source projects.

AddTask.label = Add Task...
AddTask.tooltip = Add Task
AddBookmark.label = Add Bookmark...
AddBookmark.tooltip = Add Bookmark

PreviewReference.label = &Preview Reference Document


