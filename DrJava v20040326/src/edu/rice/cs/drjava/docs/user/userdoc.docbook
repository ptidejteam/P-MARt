<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook V3.1//EN">

<!--
  User Documentation for DrJava
  @version $Id: userdoc.docbook,v 1.35 2004/03/16 04:23:11 jhsia Exp $
-->
<book id="index">
  <!-- Meta info -->
  <bookinfo>
    <date>2002-6-20</date>
    <title>DrJava User Documentation</title>
  </bookinfo>
  <toc></toc>

  <!-- Chapter: Intro -->
  <chapter id="intro">
    <title>Introduction</title>

    <para>DrJava is a programming environment for Java, primarily intended to help students focus more on program design than on the features of a complicated development environment.  DrJava also provides many advanced features for experienced developers.  These features center around DrJava's Interactions Pane, which is a "read-eval-print loop" that allows users to easily develop, test, and debug Java programs in an interactive, incremental manner.</para>
    <simplelist>
      <member>Home Page: <ulink url="http://drjava.org">http://drjava.org</ulink></member>
      <member>Original Paper: <ulink url="http://drjava.org/papers/drjava-paper.shtml">http://drjava.org/papers/drjava-paper.shtml</ulink></member>
    </simplelist>
  </chapter>


  <!-- ---- Chapter: Getting Started ---- -->
  <chapter id="gettingstarted">
    <title>Getting Started</title>
    <para>This chapter describes the basics for how to start using DrJava, including where to get the program and how to run it.</para>

    <section id="gs-philosophy">
      <title>Philosophy</title>
      <para>The general idea behind DrJava is to provide powerful development tools that are as easy to use as possible.  For this reason, we try to make DrJava easy to run and easy to understand, through a simple user interface with few panes and a legible toolbar.  Meanwhile, we want to help novice users become comfortable with writing Java code by allowing them to quickly evaluate expressions in DrJava's Interactions Pane.  All of our powerful features try to build on this simple and interactive interface.</para>
      <para>The rest of this chapter will walk you through downloading and running DrJava, but if you have the DrJava <filename>.jar</filename> file, you can just double-click it to get started.</para>
    </section>

    <section id="gs-downloading">
      <title>Downloading DrJava</title>
      <para>You can download the newest releases of DrJava as a <filename>.jar</filename> file from our home page, <ulink url="http://drjava.org">http://drjava.org</ulink>, or directly from our <ulink url="http://sourceforge.net/project/showfiles.php?group_id=44253">Project Filelist</ulink> page on SourceForge.</para>
      
      <formalpara>
 <title>Stable and Development Releases</title>
 <para>We make a distinction between Stable and Development releases of DrJava.  All releases must pass our rigorous suite of unit tests and should be safe to use, but we have found that a period of beta-testing can be helpful for finding additional bugs.  Any large new features go through a beta-testing period before being included in Stable releases, ensuring these releases are safe for all users.  Our Development releases contain newer features that are under development.  We believe these releases are also ready to use, but they have not been widely beta-tested, so some users may prefer to use only Stable releases.</para>
      </formalpara>
    </section>

    <section id="gs-running">
      <title>Running DrJava</title>
      <para>On many platforms, DrJava can be started by simply double-clicking on the <filename>.jar</filename> file you downloaded.  DrJava can also be started from a command prompt, where you can optionally give it a list of source files to open at startup:</para>
      <cmdsynopsis>
 <command>java -jar drjava-DATE-TIME.jar</command>
 <arg choice='opt'>-config [CONFIG_FILE]</arg>
 <arg choice='opt' rep='repeat'>filename.java</arg>
      </cmdsynopsis>
      <para>Replace DATE-TIME with the appropriate value for your version of DrJava.  The "config" argument is optional and allows you to specify a custom configuration file, rather than the <filename>.drjava</filename> file stored in your home directory.</para>

      <formalpara>
        <title>Running DrJava on Mac OS X</title>
        <para>If you are using Mac OS X, you can download DrJava as an Application from our website.  Download the <filename>drjava-DATE-TIME-osx.tar.gz</filename> file and decompress it.  You can then copy the DrJava icon into your Applications folder or keep it on your Dock.</para>
      </formalpara>

      <formalpara>
        <title>Running DrJava on Windows</title>
        <para>If you are using Windows, you can download DrJava as an executable file from our website.  Download the <filename>drjava-DATE-TIME.exe</filename> file.  You can then run it like a normal Windows program.</para>
      </formalpara>
    </section>

    <section id="gs-requirements">
      <title>System Requirements</title>
      <para>DrJava requires Java 2, version 1.3 or later.  Note that you will need to have the JDK (not the JRE) installed if you wish to use the compiler or debugger within DrJava.</para>
      <para>We recommend using Sun's JDK 1.4.2 or later (from <ulink url="http://java.sun.com">http://java.sun.com</ulink>) for Solaris, Linux, and Windows.  Other users should use the Java virtual machine that comes with their operating system (including Mac OS X).</para>
      <para>DrJava uses two Java Virtual Machines (one for the main program, and one for the Interactions Pane) that use Java's Remote Method Invocation (RMI) to communicate with each other. RMI uses TCP/IP as the default transport mechanism, so you must have those drivers installed. Without TCP/IP, DrJava will not start properly.</para>
    </section>

    <section id="gs-license">
      <title>License</title>
<para>
DrJava Open Source License
</para>

<para>
Copyright (C) 2001-2003 JavaPLT group at Rice University (javaplt@rice.edu)
All rights reserved.
</para>

<para>
<literallayout>
Developed by:   Java Programming Languages Team
                Rice University
                http://www.cs.rice.edu/~javaplt/
</literallayout>
</para>

<para>
Permission is hereby granted, free of charge, to any person obtaining a 
copy of this software and associated documentation files (the "Software"),
to deal with the Software without restriction, including without 
limitation the rights to use, copy, modify, merge, publish, distribute, 
sublicense, and/or sell copies of the Software, and to permit persons to 
whom the Software is furnished to do so, subject to the following 
conditions:
</para>

<itemizedlist mark=opencircle>
<listitem>
<para>
    Redistributions of source code must retain the above copyright 
    notice, this list of conditions and the following disclaimers.
</para>
</listitem>
<listitem>
<para>
    Redistributions in binary form must reproduce the above copyright 
    notice, this list of conditions and the following disclaimers in the
    documentation and/or other materials provided with the distribution.
</para>
</listitem>
<listitem>
<para>
    Neither the names of DrJava, the JavaPLT, Rice University, nor the
    names of its contributors may be used to endorse or promote products
    derived from this Software without specific prior written permission.
</para>
</listitem>
<listitem>
<para>
    Products derived from this software may not be called "DrJava" nor
    use the term "DrJava" as part of their names without prior written
    permission from the JavaPLT group.  For permission, write to
    javaplt@rice.edu.
</para>
</listitem>
</itemizedlist>

<para>
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL 
THE CONTRIBUTORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR 
OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, 
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR 
OTHER DEALINGS WITH THE SOFTWARE.
</para>
      <para>DynamicJava - Copyright (c) 1999 Dyade</para>
      <para>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</para>
      <para>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</para>
      <para>THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL DYADE BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE</para>
      <para>Except as contained in this notice, the name of Dyade shall not be used in advertising or otherwise to promote the sale, use or other dealings in this Software without prior written authorization from Dyade.</para>

    </section>

  </chapter>

  <!-- Chapter: Editing Programs -->
  <chapter id="editing">
    <title>Editing Programs</title>
    <para>DrJava's core component is an editor for writing Java source code.  Like most text editors, it supports a wide range of editing features such as "Find/Replace" and "Goto Line", while also providing more advanced features like syntax coloring, automatic indentation, and brace matching.</para>

    <section id="edit-defpane">
      <title>Definitions Pane</title>
      <para>The Definitions Pane is the main window of DrJava, displaying the currently active source file.  As you edit files in this window, DrJava helps out with several useful features.</para>

      <formalpara>
 <title>Syntax Coloring</title>
 <para>DrJava colors special types of text differently to help make the structure of the program more apparent.  Comments appear in green, while Java keywords and types appear in blue.  Strings are colored red and characters are colored magenta, with all other text colored black.  These colors are all configurable (see <link linkend="configuration">Configuring DrJava</link>).</para>
      </formalpara>
      <para>One notable difference between syntax coloring in DrJava and other common editors (such as Emacs) is that DrJava uses <emphasis>fully correct</emphasis> coloring as the document is edited.  For example, simply typing the beginning of a block comment ("/*") will immediately update the coloring of the entire document, unlike some other editors which will only update the color of a line when that line is edited.  Having an accurate view of the program is an important aspect of understanding its structure.</para>

      <formalpara>
 <title>Automatic Indentation</title>
 <para>The key to indenting code in DrJava is the <keycode>Tab</keycode> key.  Rather than simply inserting a tab or spaces, pressing <keycode>Tab</keycode> properly indents the current line (or selected text) using common coding conventions.  As you type multiple lines of code into the Definitions Pane, DrJava automatically indents each line using the same technique.  By default, two spaces are used for each indentation level, although this can be configured in the Preferences window.  (In DrJava, code is always indented with spaces, and never with actual tab characters.)</para>
      </formalpara>

      <formalpara>
 <title>Brace Matching</title>
 <para>To help you match open and close braces, DrJava highlights the region enclosed by a pair of braces.  If you place the cursor immediately after a close brace, parenthesis, or bracket, all text between that character and the corresponding open brace is highlighted in another color.  Like syntax coloring, brace matching is also done in a <emphasis>fully correct</emphasis> manner, updated with each keystroke.</para>
      </formalpara>
      
      <formalpara>
 <title>Commenting / Uncommenting</title>
 <para>To help you easily write multi-line comments, DrJava automatically adds spaces and an asterisk on each new line.  In addition, there is an option in the "Miscellaneous" section of the Preferences window that will tell DrJava to automatically close multi-line comments for you.  Commands in the Edit menu are also available to comment out or uncomment a block of selected code using winged comments ("//").  The key bindings for these commands default to <keycode>Ctrl+Slash</keycode> and <keycode>Ctrl+Shift+Slash</keycode> respectively.  Commenting out a block of code will place "//" markers at the start of each line in the block, preserving the indentation of the code.</para>
      </formalpara>

      <formalpara>
 <title>Context Menu</title>
 <para>The Definitions Pane has a context menu, which can be used by right-clicking in the pane.  (Mac users should use <keycode>Ctrl+Click</keycode> or <keycode>Option+Click</keycode>.)  This menu provides shortcuts to useful features such as cut, copy, and paste, as well as indenting, commenting, and setting breakpoints in the debugger.</para>
      </formalpara>
    </section>

    <section id="edit-multiple">
      <title>Multiple Documents</title>
      <para>Most Java programs have several closely related source files, so DrJava supports having multiple documents open at the same time.  A list of all of the names of the open documents appears in a pane to the left of the Definitions Pane, listing files in the order in which they were opened.  You can view and edit a particular document by selecting it in the list, or by using the Previous and Next Document commands in the Edit Menu.  (These commands have keyboard shortcuts as well: <keycode>Ctrl+Comma</keycode> and <keycode>Ctrl+Period</keycode>.)  Only the class name of a source file is shown in the list and in the title bar, but the full file name of the current document is always displayed in the status bar at the bottom of the window.</para>

      <formalpara>
 <title>Context Menu</title>
 <para>The Document List also has a context menu, which can be used by right-clicking on any document in the list.  (Mac users should use <keycode>Ctrl+Click</keycode> or <keycode>Option+Click</keycode>.)  This menu provides shortcuts to document-related commands, such as saving, reverting, printing, compiling, testing, running Javadoc, and calling the main method.</para>
      </formalpara>
    </section>

    <section id="edit-navigation">
      <title>Source Navigation</title>
      <para>DrJava has many simple features to help you edit and navigate source files.</para>

      <formalpara>
 <title>Find/Replace</title>
 <para>DrJava has a Find and Replace utility, which is conveniently displayed as one of the tabs at the bottom of the window, rather than as a dialog blocking part of the window.  The tab is first displayed when you Find/Replace from the Edit Menu (or using the keyboard shortcut, <keycode>Ctrl+F</keycode>), and it can be closed by clicking on the "X" button in the upper right corner of the tab (or by hitting the <keycode>Escape</keycode> key).  To search for a term, type it in the Find text field and click "Find Next" (or press <keycode>Enter</keycode>).  To replace the term with another, type the new term in the Replace text field, find an occurrence using "Find Next", and then click "Replace".  The "Replace/Find Next" and "Replace All" buttons help to speed up this process.  There are also three checkboxes to customize each search: "Match Case", "Search Backwards", and "Search All Documents".  Unchecking the first box will return case-insensitive results, checking the second box will reverse the direction of searching, and checking the third box will tell DrJava to search through all of the open documents in sequence.  Note that if "Search All Documents" is enabled, the search will not wrap to the beginning of the current document until all other documents have first been searched.</para>
      </formalpara>

      <formalpara>
 <title>Goto Line</title>
 <para>Selecting "Goto Line" from the Edit Menu (or hitting <keycode>Ctrl+G</keycode>) will display a dialog allowing you to scroll to a particular line number.</para>
      </formalpara>

      <formalpara>
 <title>Line Numbering</title>
 <para>DrJava displays the cursor's current line number and column number on the right side of the status bar at the bottom of the window.  The line number is shown on the left and starts at 1, and the column number is shown on the right and starts at 0.</para>
      </formalpara>

      <para>All line numbers can also be displayed in the left margin of the Definitions Pane, using the "Show All Line Numbers" option in the "Display Options" section of the Preferences window.  The line number font can be changed in the "Fonts" section.  (See <link linkend="configuration">Configuring DrJava</link>.)</para>

    </section>

  </chapter>
  
  <!-- Chapter: Interactions Pane -->
  <chapter id="interactions">
    <title>Interactions Pane</title>
    <para>One of the key distinguishing features of DrJava is its Interactions Pane, which allows you to enter and evaluate Java statements and expressions on the fly.  This is remarkably useful for beginning students, who no longer have to learn to write main methods, recompile, and run programs from a command line simply to test how a new class or method behaves.  From a teaching standpoint, the Interactions Pane is a very easy way to help students learn to write Java without having to explain the full meaning of syntax like "public static void main", and it also provides an ideal way to perform demonstrations in class.  The Interactions Pane can also be used to experiment with your own programs or new libraries, or even to create graphical user interfaces interactively.</para>

    <formalpara>
      <title>How to Use</title>
      <para>The Interactions Pane supports the execution of any valid Java statements as well as the evaluation of Java expressions.  Simply define variables and call methods as you would in an ordinary method, or even define new classes and methods and call them interactively.  In general, any statement or expression ending without a semicolon will display its result in the Interactions Pane, while those ending with a semicolon will complete without displaying a result.  Result objects are displayed using the object's toString() method.  Any system output will be displayed in the Interactions Pane in green (as well as in the Console tab), while system errors will be displayed in red by default.  Any system input will cause a box to be inserted in the Interactions Pane where you can type what you want System.in to read. This text will be colored purple. These colors can be modified in the "Colors" section in the Preferences window.</para>
    </formalpara>
    
    <para>Here is a simple interactions session, to demonstrate how the Interactions Pane can be used to experiment with objects or show GUI components.</para>
    
    <programlisting>
Welcome to DrJava.
> String s = "Hello World";
> s
"Hello World"
> s.length()
11
> import javax.swing.*;
> JFrame frame = new JFrame("My JFrame");
> frame.show();
> 
    </programlisting>
    <formalpara>
      <title>Intelligent Newlines</title>
      <para>DrJava parses your input each time Enter is pressed.  If it finds that the input is not complete (unmatched braces or a missing semicolon, for example), it will automatically insert a newline, prompting you for more input on the next line.  This feature makes declaring loops, methods, and classes very clean.</para>
    </formalpara>
    <formalpara>
      <title>Resetting the Interactions Pane</title>
      <para>You can reset the Interactions Pane if you wish to start from scratch or if a method call hangs and does not return.  Resetting removes any variables from scope and terminates any methods running in the Interactions Pane.  To do this, simply choose the "Reset Interactions" command from the Tools menu.  This will also reset the Debugger and any JUnit tests that are currently running.</para>
    </formalpara>

    <formalpara>
      <title>Running the Main Method</title>
      <para>For convenience, DrJava supports calling the main method of a class in the Interactions Pane by simply entering "java" followed by the class name and any arguments.  For example, to run MyClass with args "arg1" and "arg2", type the following into the Interactions Pane:</para>
    </formalpara>
    <programlisting>java MyClass arg1 arg2</programlisting>
    <para>Note that this feature does not support passing special flags or arguments to the JVM itself, as is supported on the command line.</para>
    <para>Another shortcut for this feature is the "Run Document's Main Method" command, which can be found in both the Tools menu and the context menu of the document list.  This command will simply insert the appropriate <literal>"java MyClass"</literal> text into the Interactions Pane to run the current class's main method.</para>

    <formalpara>
      <title>Keyboard Shortcuts</title>
      <para>Many actions in the Interactions Pane have keyboard shortcuts for ease of use.  Use the Up and Down arrow keys to scroll through a history of the previously entered commands, or <keycode>Ctrl+B</keycode> to clear the current command.  You can also use <keycode>Shift+Enter</keycode> to insert newlines into statements in the Interactions Pane.  DrJava also now supports searching backwards through history.  To use this feature, type in the first few characters of the command you wish to repeat and hit the Tab key.  The last command that matches the characters you typed will appear.  Hitting Tab repeated searches farther back, while Shift-Tab will move you forward in the history.</para>
    </formalpara>

    <formalpara>
      <title>Setting the Classpath</title>
      <para>To interact with any class within the Interactions Pane, it must be included on the Interactions Classpath, which can include more than the user's own classpath.  Any class which is opened in the Definitions Pane of DrJava is automatically added to this classpath, but additional classes and directories can be added using the "Extra Classpath" configuration option.  (See <link linkend="configuration">Configuring DrJava</link>.)  The current classpath of the Interactions Pane can be viewed at any time by selecting "View Interactions Classpath" from the context menu.</para>
    </formalpara>

    <formalpara>
      <title>Saving the Interactions History</title>
      <para>You can save all of your past interactions to a file at any time, using the "Save Interactions History" command in the Tools and popup menus.  This command gives you the option to edit any part of the history before saving it, through  a separate window that supports editing.  By default, up to 500 of the most recent Interaction commands are kept in this history, though this number is configurable.  Histories are saved in files with a <filename>.hist</filename> extension, and they can be later executed in the Interactions Pane with the "Execute Interactions History" command in the Tools menu.  Saving and executing histories can be particularly useful for initial setup of an often repeated task, such as importing several packages and initializing frequently used variables.  To help manage the history, a "Clear Interactions History" command is also provided in the Tools menu.</para>
    </formalpara>

    <formalpara>
      <title>Loading a History File as a Script</title>
      <para>You can load a history file as a script that can be executed one line at a time, using the "Load Interactions History as Script" command in the Tools and popup menus.  A panel will appear on the right side of the Interactions Pane with buttons that allow you to display the previous interaction, execute the current interaction, display the next interaction, and close the panel.  This feature is useful during presentations because you can step through a series of interactions that has been prepared in advance, allowing the audience to see the result of each interaction.</para>
    </formalpara>

    <formalpara>
      <title>Lifting Interactions to Definitions</title>
      <para>One common use of the Interactions Pane is to test a line of code intended for a program, even before it is written in the program itself.  For example, this can be the case when experimenting with method calls to determine their results.  In this situation, it is convenient to copy a working line from the Interactions Pane into the Definitions Pane.  This can be done quickly with the "Lift Current Interaction to Definitions" command in the Tools menu, which simply copies the text at the current prompt and pastes it at the cursor position in the Definitions Pane.</para>
    </formalpara>

      <formalpara>
 <title>Context Menu</title>
 <para>The Interactions Pane has a context menu, which can be used by right-clicking in the pane.  (Mac users should use <keycode>Ctrl+Click</keycode> or <keycode>Option+Click</keycode>.)  This menu provides shortcuts to useful commands for the Interactions Pane, including cut, copy, and paste, as well as resetting the Interactions Pane, executing, loading, and saving history files, viewing the current classpath, and copying the current interaction to the Definitions Pane.</para>
      </formalpara>
  </chapter>



  <!-- Chapter: Integrated Compiler -->
  <chapter id="compiling">
    <title>Compiling Programs</title>
    <para>Java compilers check your programs for errors and translate them to class files which can be used.  Any time you change the source file for a class, it must be compiled before it can be used.  To do this in DrJava, you can simply click on the "Compile All" button on the toolbar to compile any open documents.  Any resulting errors will be highlighted in the document.</para>

    <section id="compiling-file">
      <title>Compiling Files</title>
      <para>To compile the documents you have open in DrJava, click on the "Compile All" button on the toolbar, or choose either "Compile All" or "Compile Current Document" from the Tools menu.  Before the compilation can begin, all open files must be saved, even if only the current document is being compiled.  This is necessary because one file can depend on other files, and it is important that no files have been modified when errors are displayed.  (Otherwise, an error could be highlighted on a line which has changed.)  Once a compilation completes successfully, the Interactions Pane is reset so that the new class files can be used.  The output on the Console Tab is also reset to begin the new session, unless the "Clear Console After Interactions Reset" option in the "Miscellaneous" section of the Preferences is unchecked.</para>
    </section>

    <section id="compiling-errors">
      <title>Viewing Compiler Errors</title>
      <para>If the compiler finds any errors in your program, DrJava displays them in the Compiler Output tab at the bottom of the window.  A summary of each error is displayed in the list, including the file name and line number.  You can click on any error to highlight the corresponding line in the document itself.  (Note that a file will be opened automatically if it contains errors detected by the compiler.)  Similarly, if the cursor is moved to a line of code that contains an error while the Compiler Output tab is displayed, that line and the corresponding error message are highlighted.  You can disable highlighting compiler errors in the source by unchecking the "Highlight Source" checkbox on the Compiler Output tab, or by closing the Compiler Output tab.</para>
    </section>

    <section id="compiling-selecting">
      <title>Selecting a Compiler</title>
      <para>DrJava supports the use of different Java compilers, such as the traditional "Javac" compiler supplied with the JDK or Sun's JSR-14 experimental compiler (which supports generic types).  DrJava will attempt to locate the your Java compiler on startup by searching for standard installation directories, but sometimes it is unable to find a compiler.  In this case, it will prompt you to specify the location of a compiler, or allow you to continue using DrJava without any compiler.  Note that the location of the compiler can be specified in the Preferences (see <link linkend="configuration">Configuring DrJava</link>).  If more than one compiler is specified, the active compiler can be selected from a menu on the Compiler Output tab itself.  You may notice that the same compiler may appear multiple times in the menu.  This happens because DrJava looks for compilers in three different places: on the user classpath, the user specified location in Preferences, and in the usual locations that the compiler can be found (the default installation directory, where java is located, etc.).</para>
    </section>
  </chapter>



  <!-- Chapter: JUnit Integration -->
  <chapter id="junit">
    <title>Testing using JUnit</title>
    <para>While compilers can look for structural problems in a program, they cannot tell whether the results of a program or method are correct.  Instead, all developers test their programs to ensure that they behave as expected.  This can be as simple as calling a method in the Interactions Pane to view its results, but this technique requires you to think about the answers you expect every time you run any tests.  A much better solution is to give the tests the answers you expect, and let the tests themselves do all the work.</para>

    <para>Thankfully, a technique known as unit testing makes this quite easy.  You write many small tests that create your objects and assert that they behave the way you expect in different situations.  A unit test framework known as JUnit (<ulink url="http://www.junit.org">http://www.junit.org</ulink>) automates the process of running these tests, letting you quickly see whether your program returns the results you expect.</para>

    <para>DrJava makes the process of running unit tests very simple by providing support for JUnit.  Once you have written a JUnit test class (as described in the next section), you can simply choose the "Test Current Document" command from the Tools menu to run the tests and view the results.  The name of the tests being run will be shown in the Test Output tab, with each test method turning green if it completes successfully and red if it fails.  Any failures will be displayed after the list of methods in the same way as the <link linkend="compiling-errors">compiler errors</link>.  A progress bar will keep you updated on how many tests have been run.</para>

    <para>Also, clicking the "Test" button on the toolbar or choosing "Test All Documents" from the Tools menu will run JUnit on any open testcases, making running multiple test files very simple.</para>


    <section id="junit-writing">
      <title>Writing Unit Tests with JUnit</title>
      <!-- Partly contributed by Chris Haynes, chaynes@indiana.edu -->
      <para>With the JUnit framework, unit tests are any public classes that extend the <literal>junit.framework.TestCase</literal> class, and that have any number of methods with names beginning with the word "<literal>test</literal>".  JUnit provides methods to easily assert things about your own classes, as well as the ability to run a group of tests.</para>

      <para>The requirements for writing unit test classes are described below, with an example provided in the next section.  In general, though, the intent is for you to create instances of your classes in the test methods, get results from any methods that you call, and assert that those results match your expectations.  If these assertions pass, then your program has behaved correctly and your tests have succeeded.</para>

      <formalpara>
        <title>Writing a Test Case</title>
        <para>To use DrJava's Test command on a document, you must use the programming conventions outlined below.  You can also choose the "New JUnit Test Case" command from the File menu to automatically generate a template with these conventions.
         <itemizedlist>
   <listitem>
     <para>At the top of the file, include:</para>
     <programlisting>import junit.framework.TestCase;</programlisting>
   </listitem>
   <listitem>
     <para>The main class of the file must:</para>
     <itemizedlist>
       <listitem>
  <para>be <literal>public</literal></para>
       </listitem>
       <listitem>
  <para><literal>extend TestCase</literal></para>
       </listitem>
       <!-- No longer necessary as of JUnit 3.8 
       <listitem>
  <para>have a constructor of the form:</para>
  <programlisting>public &lt;classname&gt;(String name) { super(name); }</programlisting>
  <para>Note: If you forget this, you will get an error message that begins "TestCase() is not public..."</para>
       </listitem>
              -->
     </itemizedlist>
   </listitem>
   <listitem>
     <para>Methods of this class to be run automatically when the Test command is invoked must:</para>
     <itemizedlist>
       <listitem>
  <para>be <literal>public</literal> and <emphasis>not</emphasis> <literal>static</literal></para>
       </listitem>
       <listitem>
  <para>return <literal>void</literal></para>
       </listitem>
       <listitem>
  <para>take no arguments</para>
       </listitem>
       <listitem>
  <para>have a name beginning with "<literal>test</literal>"</para>
       </listitem>
     </itemizedlist>
   </listitem>

   <listitem>
     <para>Test methods in this class can call any of the following methods (among others):</para>
     <itemizedlist>
       <listitem>
  <programlisting>void assertTrue(String, boolean)</programlisting>
  <para>which issues an error report with the given string if the boolean is false.</para>
       </listitem>
       <listitem>
  <programlisting>void assertEquals(String, int, int)</programlisting>
  <para>which issues an error report with the given string if the two integers are not equal.  The first int is the expected value, and the second int is the actual (tested) value.  Note that this method can also be called using any primitives or with Objects, using their <literal>equals()</literal> methods for comparison.</para>
       </listitem>
       <listitem>
  <programlisting>void fail(String)</programlisting>

  <para>which immediately causes the test to fail, issuing an error report with the given string.</para>
       </listitem>
     </itemizedlist>

     <para>Test methods are permitted to throw any type of exception, as long as it is declared in the "<literal>throws</literal>" clause of the method contract.  If an exception is thrown, the test fails immediately.</para>
   </listitem>
   
   <listitem>
     <para>If there is any common setup work to be done before running each test (such as initializing instance variables), do it in the body of a method with the following contract:</para>
     <programlisting>protected void setUp()</programlisting>
     <para>This method is automatically run before any tests in the class.  (Similarly, you can write a <literal>protected void tearDown()</literal> method to be called after each test.)</para>
   </listitem>

   <listitem>
     <para>If you would rather control which methods are called when running the tests (rather than using all methods starting with "<literal>test</literal>"), you can write a method to create a test suite.  This method should be of the form:</para>
     <programlisting>
public static Test suite() {
  TestSuite suite = new TestSuite();
  suite.addTest(new &lt;classname&gt;("&lt;methodname&gt;"));
  ...
  return suite;
}
</programlisting>
     <para>It is then also necessary to import <literal>TestSuite</literal> and <literal>Test</literal> from <literal>junit.framework</literal>.  There is also a version of the <literal>addTest</literal> method that takes a <literal>Test</literal>, so test suites can be composed.</para>
   </listitem>
 </itemizedlist>
</para>
</formalpara>

      <para>A simple example of a TestCase class is given in the next section.  There are many other ways to use JUnit, as well.  See the JUnit Cookbook at <ulink url="http://junit.sourceforge.net/doc/cookbook/cookbook.htm">http://junit.sourceforge.net/doc/cookbook/cookbook.htm</ulink> for more examples and information.</para>
    </section>


    <section id="junit-example">
      <title>Simple Test Example</title>
      <para>Suppose you are writing a Calculator class that can perform simple operations on pairs of integers.  Before you even write the class, take a moment to write a few tests for it, as shown below.  (By writing tests early, you start thinking about which cases might cause problems.)  Then write the Calculator class, compile both classes, and run the tests to see if they pass.  If they do, write a few more test methods to check other cases that you have realized are important.  In this way, you can build up programs with a great deal of confidence.

<programlisting>
import junit.framework.TestCase;
public class CalculatorTest extends TestCase {

  public void testAddition() {
    Calculator calc = new Calculator();
    // 3 + 4 = 7
    int expected = 7;
    int actual = calc.add(3, 4);
    assertEquals("adding 3 and 4", expected, actual);
  }

  public void testDivision() {
    Calculator calc = new Calculator();
    // Divide by zero shouldn't work
    try {
      calc.divide(2, 0);
      fail("Should have thrown an exception!");
    }
    catch (ArithmeticException e) {
      // Good, that's what we expect
    }
  }

}
</programlisting>
      </para>
    </section>


    <section id="junit-failures">
      <title>Viewing Test Failures</title>
      <para>If one or more test methods in a JUnit test class fails, each one is displayed in the Test Output tab at the bottom of the window.  This list of failures is similar to the list of <link linkend="compiling-errors">compiler errors</link>, in that a summary of the error is given in the tab, and clicking on it highlights the corresponding line in the file (as long as the "Highlight Source" checkbox is checked).  Note that DrJava displays a warning message if the test class has been modified since the last time it was compiled, since the changes will not be reflected in the behavior of the test.  Closing the Test Output tab resets the current set of JUnit failures.</para>

      <formalpara>
 <title>Aborting Tests</title>
 <para>If a suite of tests takes a long time or goes into an infinite loop, you can abort the tests by choosing the "Reset Interactions" command from the Tools menu.  An error will be displayed in the Test Output tab showing that the tests were aborted.</para>
      </formalpara>

      <formalpara>
 <title>Viewing the Stack Trace</title>
 <para>When a JUnit test fails or throws an exception, it is sometimes helpful to view the entire stack trace when diagnosing the problem.  To view the stack trace for any test failure, right click on the failure in the Test Output tab and select "Show Stack Trace."</para>
      </formalpara>
    </section>

  </chapter>

  <!-- ---- Chapter: Debugger ---- -->
  <chapter id="debug">
    <title>Debugger</title>
    <para>DrJava provides advanced tools for debugging your programs in the Interactions Pane.  You can set breakpoints in source files in the Definitions Pane, call methods that stop at the breakpoints in the Interactions Pane, and then interact with programs while they are suspended at breakpoints.  Once a breakpoint is reached, users can interact with any variables, fields, or methods that are in scope in the suspended method.  Users can also resume the method call, or step through it a line at a time.  Finally, the values of local variables and fields can be watched in a table as the method call progresses.</para>

    <section id="debug-setup">
      <title>Using the Debugger</title>
      <para>To use DrJava's debugger, select the "Debug Mode" command from the Debugger menu.  An informational panel will be displayed between the Definitions Pane and the Interactions Pane, and several menu items in the Debugger menu will become enabled.</para>

      <formalpara>
 <title>A Note on Modifying Files</title>
 <para>When using the debugger, it is essential to remember that any modifications to source files will not be reflected in the behavior of the Interactions Pane or the debugger until the classes are recompiled.  Changing a source file while the debugger is running is not recommended, since lines which are highlighted by the debugger may no longer correspond to the lines in the running class file.  To help notify you of this danger, DrJava displays a warning message in the Debug Panel if the current document is out of sync with its class file.</para>
      </formalpara>

      <para>Because the debugger depends on the classes used in the Interactions Pane, the debugger is automatically reset each time any files are compiled, or when the Interactions Pane is reset.</para>

    </section>

    <section id="debug-breakpoints">
      <title>Breakpoints</title>
      <para>Once DrJava is in Debug Mode, you can set a breakpoint on almost any line of code in a source file in the Definitions Pane, using either the "Toggle Breakpoint on Current Line" command in the Debugger menu or the "Toggle Breakpoint" command on the context (right-click) menu in the Definitions Pane.  When a breakpoint is set, the line will be highlighted in red and an entry will appear in the Breakpoints tab of the Debug Panel.  A breakpoint is reached when a method is called in the Interactions Pane and the control flow reaches a line of code where a breakpoint has been set.  When this happens, DrJava highlights the line in bright blue and prints a message to the Interactions Pane.  DrJava then displays a new prompt in the Interactions Pane, allowing you to interact with the suspended program until it is resumed (see <link linkend="debug-interactions">Interactions at a Breakpoint</link>).</para>

      <para>When setting breakpoints, it is important to remember that only lines with actual executable code can be used.  Blank lines and comments will never trigger a breakpoint, even if the line is highlighted in red.  (Note that we do not yet support breakpoints on method contracts either, although this will be supported in a later version of DrJava.)</para>

      <formalpara>
 <title>Debugging JUnit Tests</title>
 <para>DrJava will also stop at breakpoints during JUnit tests.  Simply set a breakpoint on a line of a test method or in a method called by a test, and then choose the "Test Using JUnit" command from the Tools menu.  When control flow reaches the breakpoint, the test will be suspended.</para>
      </formalpara>
    </section>


    <section id="debug-interactions">
      <title>Interactions at a Breakpoint</title>
      <para>When DrJava reaches a breakpoint during a method call, it prints a new prompt to the Interactions Pane.  This new interpreter has the context of the program which has been suspended, including all variables, fields (even "<literal>this</literal>"), and methods that are in scope in the suspended method.  (The prompt text itself contains the name of the thread which has been suspended.  In most cases, this name will include the text being interpreted.)  You can type the name of any variable or field to view its value or assign it a new value, or you can call any method in scope to observe its behavior.  Existing lines of code in the program cannot be changed or skipped, however, and the "<literal>return</literal>" keyword is not available.  Any changes you make to variables or fields will be reflected in the program when it resumes execution, either by stepping or resuming.</para>
    </section>



    <section id="debug-step">
      <title>Stepping and Resuming</title>
      <para>After DrJava reaches a breakpoint, the method being called is suspended, and several commands in the Debug Menu and Debug Panel become available.  Choosing "Resume" allows the current method to finish execution, at least until another breakpoint is reached.  If any other threads are suspended when you resume, the Interactions Pane will switch to the most recently suspended thread.  Otherwise, the original ("top level") prompt is restored.  Alternatively, you can use the Step commands in the Debug menu to step through the execution of the method, one line at a time.  Each time a step completes, the debugger highlights the next line of code to be executed.  If the code is in another file, the debugger will look for the file on the Sourcepath and attempt to open it.</para>

      <formalpara>
 <title>Step Into</title>
 <para>The Step Into command will walk into any method calls that occur in the code, possibly opening additional files.</para>
      </formalpara>

      <formalpara>
 <title>Step Over</title>
 <para>The Step Over command will not enter any new method calls, treating them instead as a single operation to be stepped over.</para>
      </formalpara>

      <formalpara>
 <title>Step Out</title>
 <para>The Step Out command will finish running the current method and stop at the next line of code from where the method was called.</para>
      </formalpara>

      <formalpara>
 <title>Sourcepath and Step Options</title>
 <para>The sourcepath is the set of directories in which to look for source files when stepping.  It can be set in the Debugger section of the Preferences window (which can be opened from the Edit menu).  This section in the Preferences also contains options for controlling which classes will be included as part of stepping.  By default, DrJava will never step into its own source, nor its Java Interpreter (DynamicJava), nor Java itself.  If you are interested, and have downloaded the source files, you can enable these options to see how Java or DrJava works.  You can also specify which classes and packages you want to exclude when stepping.  To exclude specific classes, type in the qualified class name (the package name followed by a period and the class name).  To exclude entire packages (as well as their subpackages), type the package name followed by a period and an asterisk.  Each class or package name must be separated by a comma.</para>
      </formalpara>
    </section>

    <section id="debug-panel">
      <title>Debug Panel</title>
      <para>The Debug Panel appears when Debug Mode is on, with several informational tabs and buttons.  DrJava displays all current breakpoints in a tree organized by document in the Breakpoints tab, and it displays currently watched fields and variables with their values in a table in the Watches tab.  The Stack tab displays the current stack trace any time a method has been suspended, and the Threads tab shows all current threads along with their status at that point in time.  Most of these tabs provide context (right-click) menus for easy access to related commands, such as scrolling to a breakpoint or a line in a stack frame, or resuming a suspended thread.</para>

      <formalpara>
 <title>Watching Fields and Variables</title>
 <para>You can watch the values of class fields and local variables by entering the field or variable name into a row in the Watches table.  Any time a method is suspended (eg. after a breakpoint or step), the current value of the field or variable (if any) is displayed.  Watches can be removed from the table by deleting the name and pressing Enter.  You cannot enter expressions that need to be evaluated into the watch table.  For example, "s.length" is not a valid watch entry.  Type expressions like these into the Interactions Pane to see their values.</para>
      </formalpara>
    </section>
  </chapter>


  <!-- Chapter: Javadoc Integration -->
  <chapter id="javadoc">
    <title>Documentation with Javadoc</title>
    <para>Documenting your code is crucial to help others understand it, and even to remind yourself how your own older programs work.  Unfortunately, it is easy for most external documentation to become out of date as a program changes.  For this reason, it is useful to write documentation as comments in the code itself, where they can be easily updated with other changes.  Javadoc is a documentation tool which defines a standard format for such comments, and which can generate HTML files to view the documentation from a web broswer.  (As an example, see Sun's Javadoc documentation for the Java libraries at <ulink url="http://java.sun.com/j2se/1.4/docs/api/index.html">http://java.sun.com/j2se/1.4/docs/api/index.html</ulink>.)</para>

    <para>You can easily run Javadoc over your programs from within DrJava, using the "Javadoc All Documents" and "Preview Javadoc for Current Document" commands in the Tools menu.  These commands will generate Javadoc HTML files from the comments you have written and display them in a browser.  This chapter gives a brief overview of these commands and how to write Javadoc comments.  More detailed information on writing Javadoc comments can be found online at <ulink url="http://java.sun.com/j2se/javadoc/writingdoccomments/">http://java.sun.com/j2se/javadoc/writingdoccomments/</ulink>.</para>


    <section id="javadoc-writing">
      <title>Writing Javadoc Comments</title>
      <para>In general, Javadoc comments are any multi-line comments ("<literal>/** ... */</literal>") that are placed before class, field, or method declarations.  They must begin with a slash and two stars, and they can include special tags to describe characteristics like method parameters or return values.  The HTML files generated by Javadoc will describe each field and method of a class, using the Javadoc comments in the source code itself.  Examples of different Javadoc comments are listed below.</para>

      <formalpara>
        <title>Simple Comments</title>
        <para>Normal Javadoc comments can be placed before any class, field, or method declaration to describe its intent or characteristics.  For example, the following simple Student class has several Javadoc comments.</para>
      </formalpara>
<programlisting>
/**
 * Represents a student enrolled in the school.
 * A student can be enrolled in many courses.
 */
public class Student {

  /**
   * The first and last name of this student.
   */
  private String name;

  /**
   * Creates a new Student with the given name.
   * The name should include both first and
   * last name.
   */
  public Student(String name) {
    this.name = name;
  }

}
</programlisting>

      <formalpara>
        <title>Using Tags</title>
        <para>Tags can be used at the end of each Javadoc comment to provide more structured information about the code being described.  For example, most Javadoc comments for methods include "<literal>@param</literal>" and "<literal>@return</literal>" tags when applicable, to describe the method's parameters and return value.  The "<literal>@param</literal>" tag should be followed by the parameter's name, and then a description of that parameter.  The "<literal>@return</literal>" tag is followed simply by a description of the return value.  Examples of these tags are given below.</para>
      </formalpara>
<programlisting>
  /**
   * Gets the first and last name of this Student.
   * @return this Student's name.
   */
  public String getName() {
    return name;
  }

  /**
   * Changes the name of this Student.
   * This may involve a lengthy legal process.
   * @param newName This Student's new name.  
   *                Should include both first
   *                and last name.
   */
  public void setName(String newName) {
    name = newName;
  }
</programlisting>

      <para>Other common tags include "<literal>@throws e</literal>" (to describe some Exception "e" which is thrown by a method) and "<literal>@see #foo</literal>" (to provide a link to a field or method named "foo").</para>
    </section>


    <section id="javadoc-use">
      <title>How to Use Javadoc in DrJava</title>
      <para>In general, Javadoc HTML files are most useful when they are generated in large batches, since the HTML files for each of the related classes can link to each other.  For this reason, DrJava's "Javadoc All Documents" command looks for all source files in the folders and subfolders of the open documents and includes them all in the documentation, saving the files in a "<filename>doc</filename>" folder nearby.  (This folder will be placed either in the current folder or the top-level folder of the current package.)  On the other hand, it is occasionally useful to view the Javadoc HTML for a single class, to quickly get a feel for its structure.  Therefore, DrJava also provides a "Preview Javadoc for Current Document" command that only generates Javadoc for the current open document without saving it to a permanent location.  (This command saves the file in a temporary location that will be automatically deleted when you quit DrJava.)  If either of these commands finds errors in the source files, they will report them in a tab like <link linkend="compiling-errors">compiler errors</link>.</para>

    <formalpara>
      <title>Viewing Javadoc</title>
      <para>When either of the "Javadoc All Documents" or "Preview Javadoc for Current Document" commands complete successfully (or find only warnings and no errors), DrJava displays the resulting HTML files in a new window.  For Windows and Mac OS X users, these files will be displayed in the system's default web browser.  On other platforms, the files will be displayed in a simple viewer, unless the "Web Browser" option has been configured in the "Resource Locations" section of the Preferences (see <link linkend="configuration">Configuring DrJava</link>).</para>
    </formalpara>

    <formalpara>
      <title>Configuring Javadoc</title>
      <para>You can configure many aspects of how Javadoc files are generated.  Most prominent is the ability to hide fields and methods below a particular access level (eg. <literal>public</literal> or <literal>protected</literal>).  By default, no private fields or methods are shown.  Other options include specifying a URL to link to the Java library API (which defaults to Sun's own website), specifying a default destination directory for all Javadoc files, and specifying any custom parameters to pass to the Javadoc tool itself.  Finally, for programs with many nested packages (folders), DrJava provides an option to always generate Javadoc for all packages in the program, rather than just the sub-packages of the open documents.</para>
    </formalpara>    

    </section>

  </chapter>



  <!-- ---- Appendix: Configuring DrJava ---- -->
  <appendix id="configuration">
    <title>Configuring DrJava</title>
    <para>DrJava has many configurable options which can be set using the Preferences command in the Edit menu, allowing the user to change both DrJava's appearance and behavior.  Changes made to the configurable options are saved in a <filename>.drjava</filename> file in the user's home directory.  The Preferences window is the preferred method for setting these options, although more experienced users may also edit the configuration file itself.</para>

    <section id="config-preferences">
      <title>Preferences Window</title>
      <para>The Preferences window is available in the Edit menu, and provides a graphical means to edit all configurable options in DrJava.  It displays the options in several categories, each of which can be displayed as a panel of options.  Each option has a tool tip with a short description, which can be displayed by holding the mouse arrow over the option.</para>

      <para>The Apply button submits the changes on all panels and saves them to the config file, while the OK button does the same and also closes the window.  The Cancel button closes the window without applying or saving the changes.  Each panel also has a Reset to Defaults button, which resets each of the options on that panel to its original value.  Resetting does not take effect until the changes are applied with the Apply or OK buttons.</para>
    </section>

    <section id="config-file">
      <title>Editing the Config File</title>
      <para>All configured options are stored in the <filename>.drjava</filename> file in the user's home directory.  (The location of this file varies on different platforms.)  This file is a standard Java properties file, with one option on each line and with option keys and values separated by an equals sign.  Any options not defined in this file will have their default value.  While it is recommended to use the Preferences window in most cases, the config file can also be edited manually to adjust values as desired.  The correct option keys and default values for each option are given in the <link linkend="config-options">Available Options</link> section.</para>

      <para>Note: All parameters are parsed as standard Java strings, so escape characters must be considered.  Notably, to include a Windows-style path in a parameter value, all backslashes must be escaped.  For example:</para>

      <programlisting>javac.location=c:\\jdk1.4\\lib\\tools.jar</programlisting>
    </section>


    <section id="config-options">
      <title>Available Options</title>
      <para>All available configuration options are displayed here.  The option keys and default values are also provided for users who wish to edit their configuration file.</para>
      
      <!-- Resource Location -->
      <formalpara>
 <title>Resource Locations</title>
 <para>These options specify where to find Java resources on your computer, such as compilers or classpath directories.

        <variablelist>

     <varlistentry>
       <term>Web Browser (<varname>browser.file = ""</varname>)</term>
       <listitem>
  <para>Optional filename of your computer's web browser, to be used to view Javadoc and links from the Help.  If blank, the platform's default browser (on Windows or Mac OS X) will be used unless you specify a Web Browser Command (explained below).</para>
       </listitem>
     </varlistentry>

     <varlistentry>
       <term>Web Browser Command (<varname>browser.string = ""</varname>)</term>
       <listitem>
  <para>Any command or arguments you need to start your web browser.  If both this option and the Web Browser option are blank, the platform's default browser will be used.  In this option, any occurrence of "<literal>&lt;URL&gt;</literal>" will be replaced with the URL to open.  (If "<literal>&lt;URL&gt;</literal>" is not specified, the URL will be appended to the end of the command.)</para>
                <para>On Windows and Mac OS X, you can just leave this option blank and your default web browser will be used.  For other platforms (eg. Linux), here are commands to open common browsers:</para>
                <itemizedlist>
                  <listitem>
                    <para>Mozilla (if it is already running)</para>
                    <programlisting>mozilla -remote "openurl(&lt;URL&gt;)"</programlisting>
                  </listitem>
                  <listitem>
                    <para>Mozilla (if it is not already running)</para>
                    <programlisting>mozilla &lt;URL&gt;</programlisting>
                  </listitem>
                  <listitem>
                    <para>Konqueror (the KDE web browser)</para>
                    <programlisting>konqueror &lt;URL&gt;</programlisting>
                  </listitem>
                </itemizedlist>
       </listitem>
     </varlistentry>
     
     <varlistentry>
       <term>Tools.jar Location (<varname>javac.location = ""</varname>)</term>
       <listitem>
  <para>Specifies the location of the JDK's <filename>tools.jar</filename>, which contains the classes necessary for the compiler and the debugger.  This file is usually found in the JDK's <filename>lib</filename> directory.</para>
       </listitem>
     </varlistentry>
     
     <varlistentry>
       <term>JSR14 Location (<varname>jsr14.location = ""</varname>)</term>
       <term>JSR14 Collections Path (<varname>jsr14.collectionspath = ""</varname>)</term>
       <listitem>
  <para>Specifies the location of the JSR-14 versions of <filename>javac.jar</filename> and <filename>collect.jar</filename>, respectively, for use as an alternative compiler in DrJava.  JSR-14 is an experimental compiler provided by Sun which supports generic types.  The <filename>collect.jar</filename> file contains parameterized collection classes for JSR-14.  (We currently support JSR-14 versions 1.0, 1.2, 1.3, 2.0, and 2.2.  Note that for versions 2.0 and later, <filename>javac.jar</filename> has been renamed <filename>gjc-rt.jar</filename>.)</para>
       </listitem>
     </varlistentry>
     
     <varlistentry>
       <term>Extra Classpath (<varname>extra.classpath = ""</varname>)</term>
       <listitem>
  <para>Used to specify any directories or <filename>jar</filename> files to append to the classpath of the Interactions window and the compiler.  Separate the directories using the system-specific path separator (eg. colon on Unix, semicolon on Windows).</para>
       </listitem>
     </varlistentry>
     
   </variablelist>
      </para>
      </formalpara>


      <!-- Display -->
      <formalpara>
 <title>Display Options</title>
 <para>These configurable options affect how DrJava's user interface is displayed.</para>
      </formalpara>
      <variablelist>

        <varlistentry>
   <term>Look and Feel (<varname>look.and.feel = ""</varname>)</term>
   <listitem>
     <para>Name of the Swing LookAndFeel class which determines the general appearance of DrJava.  If this option is changed while DrJava is running, the changes will not apply until you restart.</para>
   </listitem>
 </varlistentry>
 
 <varlistentry>
   <term>Toolbar Buttons (<varname>toolbar.icons.enabled = true, toolbar.text.enabled = true</varname>)</term>
   <listitem>
     <para>These radio buttons control whether the toolbar buttons contain text, icons, or both.  When set manually in the config file, each of the two options can be set to true or false, though icons will be displayed if both are set to false.</para>
   </listitem>
 </varlistentry>
 
 <varlistentry>
   <term>Show All Line Numbers (<varname>linenum.enabled = false</varname>)</term>
   <listitem>
     <para>Whether to display all line numbers along the left margin of the Definitions Pane.</para>
   </listitem>
 </varlistentry>
 
 <varlistentry>
   <term>Save Main Window Postion (<varname>window.store.position = true</varname>)</term>
   <listitem>
     <para>Whether to save the position and size of the DrJava window between sessions.</para>
   </listitem>
 </varlistentry>
 
      </variablelist>


      <!-- Fonts -->
      <formalpara>
 <title>Font Options</title>
 <para>Each font option is specified as a string containing the font name, style, and size, separated by dashes.  The style should be in upper-case (ie. PLAIN, BOLD, ITALIC, or BOLDITALIC), while the font name must be a valid font on the system.  (In most cases, using the font chooser in the Preferences window is the simplest approach.)</para>
      </formalpara>
      <variablelist>
 
 <varlistentry>
   <term>Main Font (<varname>font.main = Monospaced-PLAIN-12</varname>)</term>
   <listitem>
     <para>This font is used for the definitions pane and the tabs at the bottom of the window.</para>
   </listitem>
 </varlistentry>
 
 <varlistentry>
   <term>Line Numbers Font (<varname>font.doclist = Monospaced-PLAIN-12</varname>)</term>
   <listitem>
     <para>This font is used for the line numbers on the left side of the Definitions Pane, if the "Show All Line Numbers" option in the "Display Options" section is enabled.  The actual font size will be limited by the size of the Main Font.</para>
   </listitem>
 </varlistentry>

 <varlistentry>
   <term>Document List Font (<varname>font.doclist = Monospaced-PLAIN-10</varname>)</term>
   <listitem>
     <para>This font is used in the list of all open documents on the left side of the window.</para>
   </listitem>
 </varlistentry>
 
 <varlistentry>
   <term>Toolbar Font (<varname>font.toolbar = dialog-PLAIN-10</varname>)</term>
   <listitem>
     <para>This font is used on the toolbar buttons, if the button names are configured to be displayed.</para>
   </listitem>
 </varlistentry>
 
      </variablelist>

      
      <!-- Colors -->
      <formalpara>
 <title>Color Options</title>
 <para>Colors are defined similarly to HTML colors: as six hexadecimal digits preceded by a pound sign.  The first two digits specify a red value, the next two specify a green value, and the next two specify a blue value.  For example, <constant>#00FF00</constant> would be a bright green.  (In most cases, using the color chooser in the Preferences window is the simplest approach.)</para>
      </formalpara>
      
      <!-- Definitions Colors -->
      <variablelist>
 <title>Syntax Colors for Definitions</title>
 
 <varlistentry>
   <term>Normal Color (<varname>definitions.normal.color = #000000</varname>)</term>
   <listitem>
     <para>Used as the default color for program text.</para>
   </listitem>
 </varlistentry>
 
 <varlistentry>
   <term>Keyword Color (<varname>definitions.keyword.color = #0000FF</varname>)</term>
   <listitem>
     <para>Used as the color for known keywords (eg. "public", "for").</para>
   </listitem>
 </varlistentry>
 
 <varlistentry>
   <term>Type Color (<varname>definitions.type.color = #00007C</varname>)</term>
   <listitem>
     <para>Used for known primitive types (eg. "int") and capitalized words, which usually correspond to class names.</para>
   </listitem>
 </varlistentry>
 
 <varlistentry>
   <term>Comment Color (<varname>definitions.comment.color = #007C00</varname>)</term>
   <listitem>
     <para>Used as the color for all comments.</para>
   </listitem>
 </varlistentry>
 
 <varlistentry>
   <term>Double-quoted Color (<varname>definitions.double.quoted.color = #B20000</varname>)</term>
   <listitem>
     <para>Used as the color for strings, which use double quotation marks.</para>
   </listitem>
 </varlistentry>
 
 <varlistentry>
   <term>Single-quoted Color (<varname>definitions.single.quoted.color = #FF00FF</varname>)</term>
   <listitem>
     <para>Used as the color for characters, which use single quotation marks.</para>
   </listitem>
 </varlistentry>
 
 <varlistentry>
   <term>Number Color (<varname>definitions.number.color = #00B2B2</varname>)</term>
   <listitem>
     <para>Used as the color for all numbers.</para>
   </listitem>
 </varlistentry>
 
      </variablelist>
      
      <!-- Other colors -->
      <variablelist>
 <title>Other Colors</title>
 <varlistentry>
   <term>Background Color (<varname>definitions.background.color = #FFFFFF</varname>)</term>
   <listitem>
     <para>Used as the background color for all panes.</para>
   </listitem>
 </varlistentry>

 <varlistentry>
   <term>Brace-matching Color (<varname>definitions.match.color = #BEFFE6</varname>)</term>
   <listitem>
     <para>Used as the highlight color when matching braces.</para>
   </listitem>
 </varlistentry>

 <varlistentry>
   <term>Compiler Error Color (<varname>compiler.error.color = #FFFF00</varname>)</term>
   <listitem>
     <para>Used as the highlight color for compiler errors and JUnit test failures.</para>
   </listitem>
 </varlistentry>

 <varlistentry>
   <term>Debugger Breakpoint Color (<varname>debug.breakpoint.color = #FF0000</varname>)</term>
   <listitem>
     <para>Used as the highlight color for breakpoints set from the debugger.</para>
   </listitem>
 </varlistentry>

 <varlistentry>
   <term>Debugger Location Color (<varname>debug.thread.color = #64FFFF</varname>)</term>
   <listitem>
     <para>Used as the highlight color for the location of the current thread in the debugger, shown after a breakpoint is hit or a step has occurred.</para>
   </listitem>
 </varlistentry>

 <varlistentry>
   <term>System.out Color (<varname>system.out.color = #007C00</varname>)</term>
   <listitem>
     <para>Used as the color for text from System.out.</para>
   </listitem>
 </varlistentry>

 <varlistentry>
   <term>System.err Color (<varname>system.err.color = #FF0000</varname>)</term>
   <listitem>
     <para>Used as the color for text from System.err.</para>
   </listitem>
 </varlistentry>

 <varlistentry>
   <term>System.in Color (<varname>system.in.color = #7C007C</varname>)</term>
   <listitem>
     <para>Used as the color for text to be read by System.in.</para>
   </listitem>
 </varlistentry>

 <varlistentry>
   <term>Interactions Error Color (<varname>interactions.error.color = #B20000</varname>)</term>
   <listitem>
     <para>Used as the color for text that indicates errors in the Interactions Pane.</para>
   </listitem>
 </varlistentry>

 <varlistentry>
   <term>Debug Message Color (<varname>debug.message.color = #0000B2</varname>)</term>
   <listitem>
     <para>Used as the color for text displayed by the debugger.</para>
   </listitem>
 </varlistentry>

      </variablelist>


      <!-- Key Bindings -->
      <formalpara>
 <title>Key Bindings</title>
 <para>Most menu items in DrJava have configurable keyboard shortcuts, along with several other navigational commands (such as moving to the beginning or end of a line).  All such options are displayed on the Key Bindings panel in the Preferences window, along with their current value.  Clicking on the value displays a window which allows the user to type a new key, showing any conflict with an existing key if there is one.  (We recommend editing these options in the Preferences window.)</para>
      </formalpara>
      
      

      <!-- Debugger -->
      <formalpara>
 <title>Debugger</title>
 <para>All configurable options relating to the debugger.</para>
      </formalpara>
      <variablelist>

 <varlistentry>
   <term>Sourcepath (<varname>debug.sourcepath = ""</varname>)</term>
   <listitem>
     <para>A list of directories on which to search for source files when stepping through code.  The debugger will attempt to open files from these directories automatically when stepping.</para>
   </listitem>
 </varlistentry>

 <varlistentry>
   <term>Step Into Java Classes (<varname>debug.step.java = false</varname>)</term>
   <listitem>
     <para>Whether to step into Java source files when stepping through a suspended method call.  It is recommended to put the Java source (usually distributed with the JDK) on the Sourcepath if this option is selected.</para>
   </listitem>
 </varlistentry>

 <varlistentry>
   <term>Step into Interpreter Classes (<varname>debug.step.djava = false</varname>)</term>
   <listitem>
     <para>Whether to step into DynamicJava source files when stepping through a suspended method call.  DynamicJava is the Java interpreter used in the Interactions pane, and the source can be obtained from <ulink url="http://koala.ilog.fr/djava">http://koala.ilog.fr/djava</ulink>.  Useful primarily when debugging DrJava itself.</para>
   </listitem>
 </varlistentry>

 <varlistentry>
   <term>Step into DrJava Classes (<varname>debug.step.drjava = false</varname>)</term>
   <listitem>
     <para>Whether to step into DrJava source files when stepping through a suspended method call.  Useful primarily when debugging DrJava itself.</para>
   </listitem>
 </varlistentry>

 <varlistentry>
   <term>Classes/Packages To Exclude (<varname>debug.step.exclude = ""</varname>)</term>
   <listitem>
     <para>Classes and packages that you do not wish DrJava to step into.  These must be fully qualified class names or package names ending in ".*" (e.g. "java.util.*") separated by commas.</para>
   </listitem>
 </varlistentry>

      </variablelist>


      <!-- Javadoc -->
      <formalpara>
 <title>Javadoc</title>
 <para>All configurable options relating to generating Javadoc.</para>
      </formalpara>
      <variablelist>

 <varlistentry>
   <term>Access Level (<varname>javadoc.access.level = "package"</varname>)</term>
   <listitem>
     <para>Specifies the lowest access level for fields and methods to include in the generated documentation.  Legal values are "public", "protected", "package", and "private".</para>
   </listitem>
 </varlistentry>

 <varlistentry>
   <term>Java Version for Javadoc Links (<varname>javadoc.link.version = (JDK Version)</varname>)</term>
   <listitem>
     <para>Specifies which URL to use when generating links to Java library classes.  Legal values are "1.3", "1.4", and "none" if no links to Java library classes are desired.  (This option defaults to the version of the user's JDK.)</para>
   </listitem>
 </varlistentry>

 <varlistentry>
   <term>Javadoc 1.3 URL (<varname>javadoc.1.3.link = "http://java.sun.com/j2se/1.3/docs/api"</varname>)</term>
   <listitem>
     <para>The URL to use when generating links to JDK 1.3 library classes.</para>
   </listitem>
 </varlistentry>

        <varlistentry>
   <term>Javadoc 1.4 URL (<varname>javadoc.1.4.link = "http://java.sun.com/j2se/1.4/docs/api"</varname>)</term>
   <listitem>
     <para>The URL to use when generating links to JDK 1.4 library classes.</para>
   </listitem>
 </varlistentry>

 <varlistentry>
   <term>Default Destination Directory (<varname>javadoc.destination = ""</varname>)</term>
   <listitem>
     <para>If a directory is specified, it will be used as the default when generating new documentation.</para>
   </listitem>
 </varlistentry>

 <varlistentry>
   <term>Custom Javadoc Parameters (<varname>javadoc.custom.params = ""</varname>)</term>
   <listitem>
     <para>Any custom parameters to pass to the Javadoc tool, separated by spaces.  Use "javadoc -help" at a command line to view the available parameters.</para>
   </listitem>
 </varlistentry>

 <varlistentry>
   <term>Generate Javadoc From Source Roots (<varname>javadoc.from.roots = false</varname>)</term>
   <listitem>
     <para>If this option is enabled, then Javadoc will not only search the current package and all subpackages for files, it will also search all "enclosing" packages (those at a higher level).</para>
   </listitem>
 </varlistentry>

      </variablelist>


      <!-- Notifications -->
      <formalpara>
 <title>Notifications</title>
 <para>Configures how often DrJava notifies you for certain events.  The notifications in this section can all be suppressed by clicking on a "Do not show this message again" checkbox (or similar) on the notification itself.</para>
      </formalpara>
      <variablelist>

 <varlistentry>
   <term>Prompt Before Quit (<varname>quit.prompt = true</varname>)</term>
   <listitem>
     <para>Whether to display a confirmation message before DrJava quits.</para>
   </listitem>
 </varlistentry>

        <varlistentry>
   <term>Prompt Before Resetting Interactions Pane (<varname>interactions.reset.prompt = true</varname>)</term>
   <listitem>
     <para>Whether to display a confirmation message before resetting the Interactions Pane.</para>
   </listitem>
 </varlistentry>

 <varlistentry>
   <term>Prompt if Interactions Pane Exits Unexpectedly (<varname>interactions.exit.prompt = true</varname>)</term>
   <listitem>
     <para>Whether to display a message if the Interactions Pane is exited without the Reset button being clicked.</para>
   </listitem>
 </varlistentry>

 <varlistentry>
   <term>Prompt for Javadoc Destination (<varname>javadoc.prompt.for.destination = true</varname>)</term>
   <listitem>
     <para>Whether to always display the destination selection dialog when starting Javadoc.</para>
   </listitem>
 </varlistentry>

        <varlistentry>
   <term>Automatically Save Before Compiling (<varname>save.before.compile = false</varname>)</term>
   <listitem>
     <para>Whether to automatically save all files each time a Compile command is chosen.</para>
   </listitem>
 </varlistentry>

        <varlistentry>
   <term>Automatically Save Before Generating Javadoc (<varname>save.before.javadoc = false</varname>)</term>
   <listitem>
     <para>Whether to automatically save all files each time a Javadoc command is chosen.</para>
   </listitem>
 </varlistentry>

        <varlistentry>
   <term>Warn on Breakpoint Out of Sync (<varname>warn.breakpoint.out.of.sync = true</varname>)</term>
   <listitem>
     <para>Whether to warn if setting a breakpoint in a source file that is not in sync with its class file.</para>
   </listitem>
 </varlistentry>

        <varlistentry>
   <term>Warn if Debugging Modified File (<varname>warn.debug.modified.file = true</varname>)</term>
   <listitem>
     <para>Whether to warn if using the debugger on a file which has been modified since its last save.</para>
   </listitem>
 </varlistentry>

        <varlistentry>
   <term>Warn to Restart to Change Look and Feel (<varname>warn.change.laf = true</varname>)</term>
   <listitem>
     <para>Whether to warn that changes to the Look and Feel do not take effect until after a restart.</para>
   </listitem>
 </varlistentry>

      </variablelist>

      
      <!-- Miscellaneous -->
      <formalpara>
 <title>Miscellaneous</title>
 <para>These are the remaining configurable options in DrJava.</para>
      </formalpara>
      <variablelist>
 
 <varlistentry>
   <term>Indent Level (<varname>indent.level = 2</varname>)</term>
   <listitem>
     <para>Sets how many spaces to use for each level of indenting.  Note that tab characters are not allowed in DrJava.</para>
   </listitem>
 </varlistentry>
 
 <varlistentry>
   <term>Working Directory (<varname>working.directory = ""</varname>)</term>
   <listitem>
     <para>Specifies the default directory for DrJava to use when starting up.  The open and save dialogs will start here, rather than in the user's current directory, if this option is set.  The Interactions classpath will also include this directory.</para>
   </listitem>
 </varlistentry>
 
 <varlistentry>
   <term>Size of Interactions History (<varname>history.max.size = 500</varname>)</term>
   <listitem>
     <para>Specifies how many commands will be remembered in the history of the Interactions window.  Previous commands can be recalled using the up and down arrow keys.</para>
   </listitem>
 </varlistentry>

 <varlistentry>
   <term>Recent Files List Size (<varname>recent.files.max.size = 5</varname>)</term>
   <listitem>
     <para>Specifies how many recently used files to display in the File menu.</para>
   </listitem>
 </varlistentry>

 <varlistentry>
   <term>Automatically Close Block Comments (<varname>auto.close.comments = false</varname>)</term>
   <listitem>
     <para>Whether to automatically insert the string designating the end of a multi-line comment after beginning one.</para>
   </listitem>
 </varlistentry>

 <varlistentry>
   <term>Allow Assert Keyword in Java 1.4 (<varname>javac.allow.assert = false</varname>)</term>
   <listitem>
     <para>Whether to support the <literal>assert</literal> keyword when compiling with a JDK 1.4 or later compiler.</para>
   </listitem>
 </varlistentry>


        <varlistentry>
   <term>Keep Emacs-style Backup Files (<varname>files.backup = true</varname>)</term>
   <listitem>
     <para>Whether DrJava should keep a backup copy of each file that the user modifies, saved with a "~" at the end of the filename.</para>
   </listitem>
 </varlistentry>

        <varlistentry>
   <term>Clear Console After Interactions Reset (<varname>reset.clear.console = true</varname>)</term>
   <listitem>
     <para>Whether DrJava should clear the contents of the Console Tab each time the Interactions Pane is reset.</para>
   </listitem>
 </varlistentry>
   
  <varlistentry>
   <term>JVM Args (<varname>jvm.args = ""</varname>)</term>
   <listitem>
     <para>Command line arguments used when creating the InterpreterJVM.  This is an advanced option because if you use invalid arguments, the InterpreterJVM may not start up successfully.  If this happens, remove the value stored in Preferences.</para>
   </listitem>
  </varlistentry>
 
      </variablelist>
      
    </section>      
    
  </appendix>

  <!-- ---- Appendix: Setting up DrJava ---- -->
  <appendix id="platform-setup">
    <title>Setting up DrJava on your Platform</title>
    <para>DrJava can be set up to handle files similarly to other applications on your platform.  For example, Windows <!--and Mac OS X--> allows you to associate types of files with particular applications.  <!-- In addition, some platforms even allow you to drop files onto an application's icon to open them.--></para>

    <section id="setup-win32-associations">
      <title>Associating Java files to DrJava, on Windows</title>
      <para>To set up DrJava as your default editor for <filename>.java</filename> files in Windows, you will need a few pieces of information:</para>

      <orderedlist>
        <listitem>
   <para>The complete path to your Java executable, likely in <filename>C:\Program Files</filename>.  We recommend using <filename>javaw.exe</filename>, since it launches programs without displaying a command prompt window.</para>
        </listitem>
          
        <listitem>
    <para>The complete path to your DrJava Jar file.  To simplify upgrading, we recommend renaming the Jar file to <filename>drjava.jar</filename> each time you download it, and always keeping it in the same folder.</para>
 </listitem>
      </orderedlist>

      <para>Using the above information, you can change the file associations for <filename>.java</filename> files:</para>

      <orderedlist>
        <listitem>
   <para>Find the Folder Settings dialog.  Depending on your version of Windows, it might be in one of several locations:</para>

          <itemizedlist>
            <listitem><para>The "Settings" group of the Start Menu</para></listitem>
            <listitem><para>The "Tools" menu in Windows Explorer</para></listitem>
            <listitem><para>An icon in the Control Panel</para></listitem>
          </itemizedlist>

        </listitem>

        <listitem>
   <para>Within the Folder Settings dialog, click on the File Types tab.</para>
 </listitem>

        <listitem>
   <para>Search the list of file types for the <filename>.java</filename> extension.  If it is not already in the list:</para>
          <orderedlist>
            <listitem>
       <para>Click the "New" button to create a new file type.</para>
     </listitem>
            <listitem>
       <para>Type in "java" as the extension and click OK.</para>
     </listitem>
          </orderedlist>
        </listitem>

        <listitem>
   <para>Select the <filename>.java</filename> extension from the list and click on the "Advanced" button.  The "Edit File Type" dialog will be displayed.</para>
 </listitem>

 <listitem>
          <para>If the File Type does not have a name in the top text field, type in "Java Source File".</para>
        </listitem>

        <listitem>
   <para>Click the "New" button next to the list of Actions to display the "New Action" dialog.</para>
 </listitem>

        <listitem>
   <para>Type "open" as the action.</para>
 </listitem>

        <listitem>
   <para>For the application to perform the action, type:</para>
   <cmdsynopsis>
     <command>"C:\PATH\javaw.exe" -jar "C:\PATH\drjava.jar" "%1"</command>
   </cmdsynopsis>
   <para>(Replace C:\PATH\javaw.exe with the full path to your Java executable, and C:\PATH\drjava.jar with the full path to your DrJava Jar file, as found in the first few steps.)</para>
        </listitem>

        <listitem>
   <para>Optionally select an icon for all <filename>.java</filename> files, then click OK.</para>
 </listitem>

        <listitem>
          <para>Click the "Close" button.</para>
        </listitem>

        <listitem>
   <para>All <filename>.java</filename> files should now be associated with DrJava, so double-clicking on one will open it in a new copy of DrJava.</para>
 </listitem>

      </orderedlist>
    </section>
  </appendix>

  <!-- ---- Appendix: Indenting Files from the Command Line ---- -->
  <appendix id="indent-files">
    <title>Indenting Files from the Command Line</title>
    <para>DrJava has a very useful indenting algorithm, but indenting several large files can be a time consuming process.  Because of this, DrJava provides a command line interface to its indenter that can be run on a series of files.</para>
    <section id="running-indenter">
      <title>Running the Command Line Indenter</title>
      <para>Use the following command at a command prompt to run the indenter on a series of files.</para>

      <cmdsynopsis>
 <command>java -classpath drjava-DATE-TIME.jar edu.rice.cs.drjava.IndentFiles</command>
 <arg choice='opt'>-indent N</arg>
 <arg choice='opt' rep='repeat'>filename.java</arg>
      </cmdsynopsis>
      <para>Replace DATE-TIME with the appropriate value for your DrJava file.  The "-indent" argument is optional, where N is the number of spaces to use for an indentation level.</para>

    </section>
  </appendix>
</book>
