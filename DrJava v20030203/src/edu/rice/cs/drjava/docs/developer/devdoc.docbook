<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook V3.1//EN">

<!--
  Developer Documentation for DrJava
  Charles Reis
  @version $Id: devdoc.docbook,v 1.9 2003/02/05 01:32:11 csreis Exp $
-->
<book id="index">
  <!-- Meta info -->
  <bookinfo>
    <date>2003-1-9</date>
    <title>DrJava Developer Documentation</title>
  </bookinfo>
  <toc></toc>


  <!-- Chapter: Intro -->
  <chapter id="intro">
    <title>Introduction</title>

    <para>By releasing DrJava as an open source project, our team welcomes anyone to download, modify, and use the source code for their own benefit.  We hope that this outreach to the development community can continue to help DrJava achieve its educational goals and improve its quality as a stable and full-featured development environment.  This documentation will help you get started with downloading and compiling the DrJava code base.</para>

    <para>To ensure that DrJava's reliability and robustness is maintained, the DrJava development team adheres to several guidelines and philosophies when making changes.  We will soon add chapters to this documentation describing these design philosophies and coding conventions, in an effort to help DrJava developers keep the quality of the project high.</para>
  </chapter>


  <!-- Chapter: Project Goals
  <chapter id="goals">
    <title>Project Goals</title>

    <para>text...</para>
  </chapter>
  -->


  <!-- Chapter: Design Philosophies
  <chapter id="philosophies">
    <title>Design Philosophies</title>

    <para>text...</para>
  </chapter>
  -->


  <!-- Chapter: Code Layout
  <chapter id="layout">
    <title>Code Layout</title>

    <para>text...</para>
  </chapter>
  -->


  <!-- Chapter: Coding Conventions
  <chapter id="conventions">
    <title>Coding Conventions</title>

    <para>text...</para>
  </chapter>
  -->


  <!-- Chapter: Build Environment -->
  <chapter id="environment">
    <title>Setting Up A Build Environment</title>
    <para>This chapter walks you through setting up your build environment to develop DrJava.  It is addressed to both independent developers and members of the DrJava development team who will be committing code to the CVS repository.  We attempt to support development on Linux, Mac OS X, and Windows.</para>

    <section id="env-sf-account">
      <title>SourceForge Account</title>
      <para>Regardless of whether you will be committing code or not, we recommend registering for a SourceForge user account to check out code and submit or respond to bugs and feature requests.  If you will be a member of the DrJava development team, the DrJava project administrators will add your account to the project to allow you to commit code and perform related tasks.  If you already have a SourceForge account, you can skip the first two steps.</para>
      <itemizedlist>
        <listitem>
          <para>Go to <ulink url="http://sourceforge.net">http://sourceforge.net</ulink> and click on "New User via SSL"</para>
        </listitem>
        <listitem>
          <para>Fill in the form to create a user account.</para>
        </listitem>
        <listitem>
          <para>If you will be a member of the DrJava development team, email one of the DrJava project administrators with your SourceForge username so that you can be added to the DrJava project.</para>
        </listitem>
      </itemizedlist>
    </section>


    <section id="env-install">
      <title>Install Necessary Programs</title>
      <para>You will need to have several programs installed to be able to develop and run DrJava.  This section will help you install each of them, if you do not already have them installed.</para>

      <itemizedlist>
        <listitem>
          <formalpara>
            <title>Java Software Development Kit</title>
            <para>If you don't have it already, you will need to install Sun's Java SDK (not just the JRE).  If you are using Linux or Windows, install version 1.4.1 or later.  If you are using Mac OS X, you should already have version 1.3.1 installed.  (Version 1.4.1 for Mac OS X is not yet available.)  You can download the SDK for your platform from <ulink url="http://java.sun.com">http://java.sun.com</ulink>.</para>
          </formalpara>
        </listitem>

        <listitem>
          <formalpara>
            <title>Cygwin (Windows only)</title>
            <para>If you will be developing on a Windows platform, you will need to install Cygwin (a Unix-like shell for Windows) to run the DrJava build script.</para>
          </formalpara>
          <itemizedlist>
            <listitem>
              <para>Download and run the latest Cygwin installer from <ulink url="http://www.cygwin.com">http://www.cygwin.com</ulink>.</para>
            </listitem>
            <listitem>
              <para>On the "Select Packages" screen of the installer, make sure that "cvs" (in the Dev category) and "openssh" (in the Net category) are selected to be installed.</para>
            </listitem>
          </itemizedlist>
        </listitem>

        <listitem>
          <formalpara>
            <title>Mac OS X Developer Tools (Mac OS X only)</title>
            <para>If you will be developing on a Mac OS X platform, you will need to install the Developer Tools to get build tools like CVS.  This package can be downloaded for free from the Apple Developer Connection, <ulink url="http://connect.apple.com">http://connect.apple.com</ulink>, or you can install their equivalents from the Fink project at <ulink url="http://fink.sourceforge.net">http://fink.sourceforge.net</ulink>.</para>
          </formalpara>
        </listitem>

        <listitem>
          <formalpara>
            <title>Ant</title>
            <para>Ant is a build tool similar to "make", but which uses XML build scripts.  We use Ant to compile, test, and commit DrJava code.  You will need to download version 1.5.1 or later from <ulink url="http://www.apache.org/dist/ant/binaries/">http://www.apache.org/dist/ant/binaries/</ulink>.  Decompress the package and copy the <filename>jakarta-ant-1.5.1</filename> folder to a convenient location (eg. <filename>/usr/local/ant</filename>, <filename>~/ant/</filename>, or <filename>c:\jakarta-ant-1.5.1</filename>).</para>
          </formalpara>
        </listitem>

      </itemizedlist>
    </section>


    <section id="env-sf-keypair">
      <title>SourceForge SSH Key Pairs</title>
      <para>If you will developing frequently from the same computer or on a Windows platform, we recommend setting up a SSH key pair to allow you to check out and commit code without having to enter your SourceForge password every time.  (This is required to commit code in a Windows environment due to a complication with Cygwin.)  However, you should not set up a key pair on a public Windows computer-- only on your personal computer, or on a personal account on a Unix server.  Follow the directions below to set up a key pair.</para>
      <itemizedlist>
        <listitem>
          <para>Read through the <ulink url="http://sourceforge.net/docman/display_doc.php?docid=761&amp;group_id=1">SourceForge documentation</ulink> to understand the security implications of using SSH key pairs.</para>
        </listitem>
        <listitem>
          <para>Generate a key pair on your local computer by running the following command at a Terminal (Linux / Mac OS X) or a Cygwin prompt (Windows).  Be sure to use a blank passphrase, and save to the default location.</para>
          <cmdsynopsis>
            <command>ssh-keygen -t dsa</command>
          </cmdsynopsis>
        </listitem>
        <listitem>
          <para>Log into SourceForge using your user account, click on "Account Options", and then "Edit Keys" under the "Shell Account Information" section.</para>
        </listitem>
        <listitem>
          <para>Copy the contents of your <filename>id_dsa.pub</filename> file into the form and click update.  <emphasis>Note: This will take up to 6 hours to go into effect!</emphasis></para>
        </listitem>
      </itemizedlist>
    </section>


    <section id="env-variables">
      <title>Set Up Environment Variables</title>
      <para>There are several environment variables you will need to set to run the build scripts.  The method to set these variables depends heavily on your platform.</para>
      <itemizedlist>
        <listitem>
          <formalpara>
            <title>Linux / Mac OS X (Bash)</title>
            <para>If you are using a Bash shell, you can simply add the lines below to your <filename>~/.bashrc</filename> (Linux) or <filename>~/.profile</filename> (Mac OS X) file, substituting the correct paths for each program.  If you are using a different shell (eg. csh, tcsh), you will have to adapt the lines accordingly.  Be sure to use the correct paths for Ant and Java.  (In Mac OS X, use <filename>/usr</filename> for <literal>JAVA_HOME</literal>.)</para>
          </formalpara>
          <programlisting>
export ANT_HOME=/usr/local/ant
export JAVA_HOME=/usr/java/j2sdk1.4.1_01
export PATH=${JAVA_HOME}/bin:${ANT_HOME}/bin:$PATH
export CVS_RSH=ssh
          </programlisting>
          <para>You will need to start a new Terminal for the changes to take effect.</para>
        </listitem>

        <listitem>
          <formalpara>
            <title>Windows</title>
            <para>Each version of Windows has a slightly different method for setting environment variables.  In most cases, you can double click on the "System" icon in the Control Panel (or choose "Properties" after right-clicking on "My Computer"), and then find a button for "Environment Variables" (usually on the "Advanced" tab.  Then add the following system-level variables, adjusting the paths for Java, Cygwin, Ant, and Emacs accordingly.</para>
          </formalpara>
          <itemizedlist>
            <listitem>
              <para>Include the following <emphasis>at the beginning</emphasis> of the <literal>Path</literal> variable: <literal>c:\j2sdk1.4.1\bin;c:\jakarta-ant-1.5.1\bin;c:\emacs-21.2\bin</literal></para>
            </listitem>
            <listitem>
              <para>Set <literal>ANT_HOME</literal> to <literal>c:\jakarta-ant-1.5.1</literal></para>
            </listitem>
            <listitem>
              <para>Set <literal>JAVA_HOME</literal> to <literal>c:\j2sdk1.4.1</literal></para>
            </listitem>
            <listitem>
              <para>Set <literal>CVS_RSH</literal> to <literal>ssh</literal></para>
            </listitem>

          </itemizedlist>
          <para>After setting these environment variables in Windows, you will need to either log out and
log back in or restart your computer.</para>
        </listitem>
      </itemizedlist>
    </section>


    <section id="env-drjava-source">
      <title>Download DrJava Source</title>
      <para>After setting the environment variables, you should be ready to check out the DrJava source code from the CVS repository.</para>
      <itemizedlist>
        <listitem>
          <para>If this is the first time you have used your SourceForge account, you might need to SSH into the CVS server to initialize it.  You will be logged out immediately, but your account will be ready to use.  Do this with the following command, replacing [USERNAME] with your SourceForge username.</para>
          <programlisting>ssh cvs.drjava.sf.net -l [USERNAME]</programlisting>
        </listitem>

        <listitem>
          <para>Create a <filename>drjava</filename> folder in your home directory, and then a <filename>built</filename> folder within it:</para>
          <programlisting>
mkdir ~/drjava
mkdir ~/drjava/built
          </programlisting>
        </listitem>

        <listitem>
          <para>Change to the <filename>drjava</filename> directory and check out the code.</para>
          <programlisting>
cd ~/drjava
cvs -d [USERNAME]@cvs.drjava.sf.net:/cvsroot/drjava co src
          </programlisting>
        </listitem>
      </itemizedlist>

      <formalpara>
        <title>Anonymous CVS</title>
        <para>You can also download the DrJava source code from CVS without a SourceForge account.  Simply replace the last line in the instructions above with the lines below.</para>
      </formalpara>
      <programlisting>
cvs -d:pserver:anonymous@cvs.sf.net:/cvsroot/drjava login
cvs -z3 -d:pserver:anonymous@cvs.sf.net:/cvsroot/drjava co src
      </programlisting>
    </section>


    <section id="env-jsr14">
      <title>Download the JSR-14 Compiler</title>
      <para>The DrJava code uses generics (parametric types), which will not officially be supported in Java until version 1.5.  Until then, we use Sun's JSR-14 prototype compiler to compile the code.  You can download this compiler from Sun, though it requires registering for a free user account.</para>
      <itemizedlist>
        <listitem>
          <para>Download the most recent JSR-14 compiler from <ulink url="http://developer.java.sun.com/developer/earlyAccess/adding_generics/">http://developer.java.sun.com/developer/earlyAccess/adding_generics/</ulink>.</para>
        </listitem>
        <listitem>
          <para>Unzip the package you downloaded and copy the included <filename>javac.jar</filename> to <filename>~/drjava/src/edu/rice/cs/lib/jsr14.jar</filename>.</para>
        </listitem>
        <listitem>
          <para>Note: The current version of the JSR-14 compiler <emphasis>will not work</emphasis> with any version of Java prior to 1.4.1, so it <emphasis>will not work</emphasis> on Mac OS X.  Please contact a DrJava project administrator for help if you are running Mac OS X.  (This problem will go away when Java 1.4.1 is released for Mac OS X.)</para>
        </listitem>
      </itemizedlist>
    </section>


    <section id="env-classpath">
      <title>Set Your Classpath</title>
      <para>You will need to have all the DrJava libraries on your classpath, along with the JDK's <filename>tools.jar</filename> file.  It is important that <filename>jsr14.jar</filename> occurs <emphasis>before</emphasis> <filename>tools.jar</filename> on the classpath.  (Note that you cannot have <filename>tools.jar</filename> copied into <filename>c:\j2sdk1.4.1\jre\lib\ext\</filename>, which would automatically put it at the front of the classpath.)  Add <literal>CLASSPATH</literal> as an environment variable, just as you did in the <link linkend="env-variables">Set Up Environment Variables</link> section.</para>
      <itemizedlist>
        <listitem>
          <formalpara>
            <title>Linux / Mac OS X (Bash)</title>
            <para>Add the following items in order to the front of your <literal>CLASSPATH</literal> environment variable in your <filename>~/.bashrc</filename> (Linux) or <filename>~/.profile</filename> (Mac OS X) file.  Separate the items with a colon, and make sure the line occurs after the definition of the <literal>JAVA_HOME</literal> variable.  Note that <filename>tools.jar</filename> is not necessary in Mac OS X.  You will need to start a new Terminal for the changes to take effect.</para>
          </formalpara>
          <programlisting>
${HOME}/drjava/src/edu/rice/cs/lib/jsr14.jar
${HOME}/drjava/src/edu/rice/cs/lib/GJv6.jar
${HOME}/drjava/src/edu/rice/cs/lib/compilers.jar
${HOME}/drjava/src/edu/rice/cs/lib/dynamicjava.jar
${HOME}/drjava/src/edu/rice/cs/lib/gj-util.jar
${HOME}/drjava/src/edu/rice/cs/lib/junit.jar
${HOME}/drjava/src/edu/rice/cs/lib/platform.jar
${HOME}/drjava/built/
${JAVA_HOME}/lib/tools.jar
          </programlisting>
          <para>In Mac OS X, you will also need to set the ANT_OPTS variable to include the JSR-14 compiler on the front of the "bootclasspath".  Add the following line to your <filename>~/.profile</filename> file, subsituting the correct home directory.</para>
          <programlisting>export ANT_OPTS='-Xbootclasspath/p:/Users/USERNAME/drjava/src/edu/rice/cs/lib/jsr14.jar'</programlisting>
        </listitem>
        <listitem>
          <formalpara>
            <title>Windows</title>
            <para>Add the following items in order to the front of your <literal>CLASSPATH</literal> environment variable, substituting the correct path for your Cygwin home directory and <filename>tools.jar</filename>.  Separate the items with a semicolon.  You will need to log out and log back in or restart for the changes to take effect.</para>
          </formalpara>
          <programlisting>
c:\cygwin\home\USERNAME\drjava\src\edu\rice\cs\lib\jsr14.jar
c:\cygwin\home\USERNAME\drjava\src\edu\rice\cs\lib\GJv6.jar
c:\cygwin\home\USERNAME\drjava\src\edu\rice\cs\lib\compilers.jar
c:\cygwin\home\USERNAME\drjava\src\edu\rice\cs\lib\dynamicjava.jar
c:\cygwin\home\USERNAME\drjava\src\edu\rice\cs\lib\gj-util.jar
c:\cygwin\home\USERNAME\drjava\src\edu\rice\cs\lib\junit.jar
c:\cygwin\home\USERNAME\drjava\src\edu\rice\cs\lib\platform.jar
c:\cygwin\home\USERNAME\drjava\built\
c:\j2sdk1.4.1\lib\tools.jar
          </programlisting>
        </listitem>
      </itemizedlist>
    </section>


    <section id="env-compile">
      <title>Compile the DrJava Source</title>
      <para>You should finally be ready to compile the DrJava source code.  First compile the source for
the <literal>util</literal> package, and then the <literal>drjava</literal> package, as shown
below.</para>
      <programlisting>
cd ~/drjava/src/edu/rice/cs/util
ant clean compile
cd ~/drjava/src/edu/rice/cs/drjava
ant clean compile
      </programlisting>
      <para>You can now start DrJava with the following command:</para>
      <programlisting>java edu.rice.cs.drjava.DrJava</programlisting>
      <para>You can also run DrJava from within Ant with <literal>ant run</literal>, or you can create a jar file to run with <literal>ant jar</literal>.  (On most platforms, you can double-click on the jar file to start DrJava.)</para>

      <formalpara>
        <title>Note for Older Versions of Java</title>
        <para>If you are using a version of the JDK earlier than 1.4.1 and a version of JSR-14 earlier than 1.3, you will need to make a change to the <filename>src/edu/rice/cs/build-common.xml</filename> file.  Search for <literal>"do-compile"</literal> and follow the instructions in the comment.  (Remove <literal>source="1.5"</literal>, change <literal>target</literal> to <literal>1.1</literal>, and uncomment the <literal>compilerarg</literal> line.)</para>
      </formalpara>
    </section>

  </chapter>


  <!-- Chapter: Using Ant -->
  <chapter id="ant">
    <title>Using Ant with DrJava</title>
    <para>We use an Ant build script to handle all compilation and code repository tasks for DrJava.  It is important that you use Ant rather than Javac and CVS directly, both because we use a specialized compiler (JSR-14) and because we <emphasis>require</emphasis> that all the tests pass before any commit.  Our Ant build script allows us to enforce this, while also simplifying the process of compiling and committing.</para>

    <section id="ant-common">
      <title>Commonly Used Ant Tasks</title>
      <para>This section lists several of the Ant tasks you will frequently use while developing DrJava.  You can run these tasks in either the <filename>src/edu/rice/cs/util</filename> or <filename>src/edu/rice/cs/drjava</filename> directories by typing <literal>ant</literal> and then the task name.  For example, to run the <literal>clean compile</literal> task for the <literal>util</literal> package, type the following:</para>

      <programlisting>
cd ~/drjava/src/edu/rice/cs/util
ant clean compile
      </programlisting>

      <para>Note that you can list as many task names at once as you like.</para>

      <itemizedlist>
        <listitem>
          <formalpara>
            <title>Updating from CVS: "<literal>update</literal>"</title>
            <para>This will update the current package with all of the changes that have been made in the CVS repository.  It is important to run this frequently to be sure your code is not out of date.  Note that this will be run automatically when you commit code to ensure your copy is not outdated.</para>
          </formalpara>
        </listitem>

        <listitem>
          <formalpara>
            <title>Compiling: "<literal>clean compile</literal>"</title>
            <para>This will compile all the classes in the current package.  The <literal>clean</literal> task first deletes all existing class files from the <filename>built</filename> directory, and can be run on its own.  Unfortunately, it is required to use <literal>clean</literal> every time you compile DrJava, because the use of generics prevents the compiler from knowing which specific class files need to be recompiled.  Thus, if you run the <literal>compile</literal> target on its own, you will probably get compile errors.</para>
          </formalpara>
        </listitem>

        <listitem>
          <formalpara>
            <title>Testing the code: "<literal>test</literal>"</title>
            <para>This will run all of the unit tests in the current package.  Specifically, this looks for all JUnit tests in classes with names that end in <literal>Test</literal>, compiling classes if necessary.  This can be a very time consuming task (ie. over 15 minutes on slower computers).  Note that this task is run automatically when you commit code to ensure that nothing breaks.  As a side note, <literal>test</literal> is the default Ant task for DrJava, so running Ant with no arguments will invoke this task.</para>
          </formalpara>

          <para>Since running all the tests can take a very long time, there is an option to run only those tests which match a certain regular expression.  When running Ant, specify a <literal>-Dtest-spec</literal> argument with the regular expression matching the tests you want to run, <emphasis>not including the word <literal>Test</literal></emphasis>.  For example, to run only the GlobalModelCompileTest, use the following command.</para>

          <programlisting>ant -Dtest-spec="GlobalModelCompile" test</programlisting>
        </listitem>

        <listitem>
          <formalpara>
            <title>Running DrJava: "<literal>run</literal>"</title>
            <para>This task can only be run in the <filename>src/edu/rice/cs/drjava</filename> directory, and will start DrJava from within Ant.  You can also start DrJava manually using the command below, which does not require the overhead of Ant.  (You might want to set up an alias for this command, such as <filename>drj</filename>.)</para>
          </formalpara>
          <programlisting>java edu.rice.cs.drjava.DrJava</programlisting>
        </listitem>

        <listitem>
          <formalpara>
            <title>Creating a Jar file: "<literal>jar</literal>"</title>
            <para>This task can only be run in the <filename>src/edu/rice/cs/drjava</filename> directory, and it will create a <filename>~/drjava/drjava.jar</filename> file.  On most operating systems, you can double click on this Jar file to start DrJava.  Note that this file will be deleted as part of the <literal>clean</literal> task.</para>
          </formalpara>
        </listitem>

        <listitem>
          <formalpara>
            <title>Committing changes: "<literal>commit</literal>"</title>
            <para>This will commit the code on your computer to the CVS repository.  This task incorporates most of the other tasks:  it updates your code to ensure it is not out of date, it compiles your code, and it runs all the unit tests.  If these tasks pass, it will ask for a commit message and commit the code.  (You can either type the message manually on one line, or specify the name of a file containing the message, if you want to have multiple lines.)  If you have not set up an SSH key pair (see <link linkend="env-sf-keypair">Sourceforge SSH Key Pairs</link>), you will have to enter your Sourceforge password several times.  (Once to update, once to commit, and once to tag the code for a potential release.)</para>
          </formalpara>
        </listitem>

      </itemizedlist>
    </section>

  </chapter>

</book>
