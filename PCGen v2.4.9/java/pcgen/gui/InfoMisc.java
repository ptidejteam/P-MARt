/*
 * InfoMisc.java
 * Copyright (c) 2001 Thomas G. W. Epperly <tomepperly@home.com>
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 *
 * Created on April 22, 2001, 8:54 PM
 */

package pcgen.gui;

import java.awt.event.ComponentEvent;
import java.awt.event.FocusEvent;
import javax.swing.*;
import pcgen.core.Globals;
import pcgen.core.PlayerCharacter;

/**
 * This displays three text areas for the user to provide information about
 * their companions, magic items and valuables (money, gems, and valuable
 * stuff).
 *
 * @author  Tom Epperly
 * @version $Revision: 1.1 $
 */
public final class InfoMisc extends JPanel
{

	private boolean d_shown = false;
	private JLabel d_moneyLabel;
	private JLabel d_magicItems;
	private JScrollPane d_magicArea;
	private JTextArea d_magicText;
	private JScrollPane d_moneyArea;
	private JTextArea d_moneyText;

	/** Creates new form InfoMisc */
	public InfoMisc()
	{
		initComponents();
	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the FormEditor.
	 */
	private void initComponents()
	{
		d_moneyLabel = new JLabel();
		d_magicItems = new JLabel();
		d_magicArea = new JScrollPane();
		d_magicText = new JTextArea();
		d_moneyArea = new JScrollPane();
		d_moneyText = new JTextArea();

		setLayout(new java.awt.GridBagLayout());
		java.awt.GridBagConstraints gridBagConstraints1;

		addComponentListener(new java.awt.event.ComponentAdapter()
		{
			public void componentShown(ComponentEvent evt)
			{
				final PlayerCharacter aPC = Globals.getCurrentPC();
				aPC.setAggregateFeatsStable(true);
				aPC.setAutomaticFeatsStable(true);
				aPC.setVirtualFeatsStable(true);

				getDataFromCore(evt);
			}

			public void componentHidden(ComponentEvent evt)
			{
				sendDataToCore(evt);
			}
		});

		d_moneyLabel.setText("Other Assets");
		gridBagConstraints1 = new java.awt.GridBagConstraints();
		gridBagConstraints1.gridx = 0;
		gridBagConstraints1.gridy = 0;
		gridBagConstraints1.anchor = java.awt.GridBagConstraints.NORTHWEST;
		gridBagConstraints1.weightx = 1.0;
		add(d_moneyLabel, gridBagConstraints1);

		d_magicItems.setText("Magic Items");
		gridBagConstraints1 = new java.awt.GridBagConstraints();
		gridBagConstraints1.gridx = 0;
		gridBagConstraints1.gridy = 2;
		gridBagConstraints1.anchor = java.awt.GridBagConstraints.NORTHWEST;
		gridBagConstraints1.weightx = 1.0;
		add(d_magicItems, gridBagConstraints1);

		d_magicArea.setMinimumSize(new java.awt.Dimension(100, 64));
		d_magicText.setMinimumSize(new java.awt.Dimension(200, 64));
		d_magicText.addFocusListener(new java.awt.event.FocusAdapter()
		{
			public void focusLost(FocusEvent evt)
			{
				updateCoreMagic(evt);
			}
		});

		d_magicArea.setViewportView(d_magicText);

		gridBagConstraints1 = new java.awt.GridBagConstraints();
		gridBagConstraints1.gridx = 0;
		gridBagConstraints1.gridy = 3;
		gridBagConstraints1.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints1.anchor = java.awt.GridBagConstraints.WEST;
		gridBagConstraints1.weightx = 100.0;
		gridBagConstraints1.weighty = 1.0;
		add(d_magicArea, gridBagConstraints1);

		d_moneyArea.setMinimumSize(new java.awt.Dimension(100, 64));
		d_moneyText.setMinimumSize(new java.awt.Dimension(200, 64));
		d_moneyText.addFocusListener(new java.awt.event.FocusAdapter()
		{
			public void focusLost(FocusEvent evt)
			{
				updateCoreMoney(evt);
			}
		});

		d_moneyArea.setViewportView(d_moneyText);

		gridBagConstraints1 = new java.awt.GridBagConstraints();
		gridBagConstraints1.gridx = 0;
		gridBagConstraints1.gridy = 1;
		gridBagConstraints1.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints1.anchor = java.awt.GridBagConstraints.WEST;
		gridBagConstraints1.weightx = 100.0;
		gridBagConstraints1.weighty = 1.0;
		add(d_moneyArea, gridBagConstraints1);

	}

	private void sendDataToCore(ComponentEvent evt)
	{
		final PlayerCharacter aPC = Globals.getCurrentPC();
		if (aPC != null && d_shown)
		{
			String origText = (String)aPC.getMiscList().get(0);
			String newText = d_moneyText.getText();
			if (!newText.equals(origText))
			{
				aPC.getMiscList().set(0, newText);
				aPC.setDirty(true);
			}
			origText = (String)aPC.getMiscList().get(2);
			newText = d_magicText.getText();
			if (!newText.equals(origText))
			{
				aPC.getMiscList().set(2, newText);
				aPC.setDirty(true);
			}
		}
	}

	private void updateCoreMoney(FocusEvent evt)
	{
		final PlayerCharacter aPC = Globals.getCurrentPC();
		if (aPC != null)
		{
			String origText = (String)aPC.getMiscList().get(0);
			String newText = d_moneyText.getText();
			if (!newText.equals(origText))
			{
				aPC.getMiscList().set(0, newText);
				aPC.setDirty(true);
			}
		}
	}

	private void updateCoreMagic(FocusEvent evt)
	{
		final PlayerCharacter aPC = Globals.getCurrentPC();
		if (aPC != null)
		{
			String origText = (String)aPC.getMiscList().get(2);
			String newText = d_magicText.getText();
			if (!newText.equals(origText))
			{
				aPC.getMiscList().set(2, newText);
				aPC.setDirty(true);
			}
		}
	}

	private void getDataFromCore(ComponentEvent evt)
	{
		final PlayerCharacter aPC = Globals.getCurrentPC();
		if (aPC != null)
		{
			String currentMoney = (String)aPC.getMiscList().get(0);
			String currentMagic = (String)aPC.getMiscList().get(2);
			if (!d_moneyText.getText().equals(currentMoney))
				d_moneyText.setText(currentMoney);
			if (!d_magicText.getText().equals(currentMagic))
				d_magicText.setText(currentMagic);
		}
		else
		{
			d_magicText.setText("");
			d_moneyText.setText("");
		}
		requestFocus();
		d_shown = true;
	}
}
