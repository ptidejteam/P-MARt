/*
 * InfoAbilities.java
 * Copyright 2001 (C) Thomas G. W. Epperly
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 *
 * Created on April 24, 2001, 9:04 PM
 */

package pcgen.gui;
import java.util.Vector;
import java.util.SortedSet;
import java.util.TreeSet;
import java.util.Iterator;
import java.util.Collections;
import java.util.Collection;
import java.util.ArrayList;
import pcgen.core.Globals;
import pcgen.core.PlayerCharacter;
import pcgen.gui.Chooser;

/**
 * Provide a panel to display a character's special abilities, languages,
 * and weapon proficiencies. There are three main text areas for each
 * of the three main pieces of information.
 *
 * @author Tom Epperly <tomepperly@home.com>
 * @version $Revision: 1.1 $
 */
public class InfoAbilities extends javax.swing.JPanel
{
  
  /** Creates new form InfoAbilities */
  public InfoAbilities()
  {
    initComponents();
  }
  
  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  private void initComponents()//GEN-BEGIN:initComponents
  {
    d_specAbilityLabel = new javax.swing.JLabel();
    d_specAbilitiesArea = new javax.swing.JScrollPane();
    d_specAbilityText = new javax.swing.JTextArea();
    d_languageArea = new javax.swing.JScrollPane();
    d_languageText = new javax.swing.JTextArea();
    d_weaponProfArea = new javax.swing.JScrollPane();
    d_weaponProfText = new javax.swing.JTextArea();
    d_languageLabel = new javax.swing.JLabel();
    d_languageChoose = new javax.swing.JButton();
    d_weaponProfLabel = new javax.swing.JLabel();
    d_weaponProfChoose = new javax.swing.JButton();

    setLayout(new java.awt.GridBagLayout());
    java.awt.GridBagConstraints gridBagConstraints1;

    addComponentListener(new java.awt.event.ComponentAdapter()
    {
      public void componentShown(java.awt.event.ComponentEvent evt)
      {
        formComponentShown(evt);
      }
    });

    d_specAbilityLabel.setText("Special Abilities");
    gridBagConstraints1 = new java.awt.GridBagConstraints();
    gridBagConstraints1.gridx = 0;
    gridBagConstraints1.gridy = 0;
    gridBagConstraints1.insets = new java.awt.Insets(0, 0, 0, 10);
    gridBagConstraints1.anchor = java.awt.GridBagConstraints.WEST;
    gridBagConstraints1.weighty = 1.0;
    add(d_specAbilityLabel, gridBagConstraints1);

    d_specAbilityText.setLineWrap(true);
    d_specAbilityText.setWrapStyleWord(true);
    d_specAbilityText.setEditable(false);
    d_specAbilitiesArea.setViewportView(d_specAbilityText);

    gridBagConstraints1 = new java.awt.GridBagConstraints();
    gridBagConstraints1.gridx = 0;
    gridBagConstraints1.gridy = 1;
    gridBagConstraints1.gridwidth = 2;
    gridBagConstraints1.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints1.weightx = 1.0;
    gridBagConstraints1.weighty = 50.0;
    add(d_specAbilitiesArea, gridBagConstraints1);

    d_languageText.setLineWrap(true);
    d_languageText.setWrapStyleWord(true);
    d_languageText.setEditable(false);
    d_languageArea.setViewportView(d_languageText);

    gridBagConstraints1 = new java.awt.GridBagConstraints();
    gridBagConstraints1.gridx = 0;
    gridBagConstraints1.gridy = 3;
    gridBagConstraints1.gridwidth = 2;
    gridBagConstraints1.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints1.weightx = 1.0;
    gridBagConstraints1.weighty = 25.0;
    add(d_languageArea, gridBagConstraints1);

    d_weaponProfText.setLineWrap(true);
    d_weaponProfText.setWrapStyleWord(true);
    d_weaponProfText.setEditable(false);
    d_weaponProfArea.setViewportView(d_weaponProfText);

    gridBagConstraints1 = new java.awt.GridBagConstraints();
    gridBagConstraints1.gridx = 0;
    gridBagConstraints1.gridy = 5;
    gridBagConstraints1.gridwidth = 2;
    gridBagConstraints1.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints1.weightx = 1.0;
    gridBagConstraints1.weighty = 50.0;
    add(d_weaponProfArea, gridBagConstraints1);

    d_languageLabel.setText("Languages");
    gridBagConstraints1 = new java.awt.GridBagConstraints();
    gridBagConstraints1.gridx = 0;
    gridBagConstraints1.gridy = 2;
    gridBagConstraints1.insets = new java.awt.Insets(0, 0, 0, 10);
    gridBagConstraints1.anchor = java.awt.GridBagConstraints.WEST;
    add(d_languageLabel, gridBagConstraints1);

    d_languageChoose.setText("Choose");
    d_languageChoose.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        languageSelectPressed(evt);
      }
    });

    gridBagConstraints1 = new java.awt.GridBagConstraints();
    gridBagConstraints1.gridx = 1;
    gridBagConstraints1.gridy = 2;
    gridBagConstraints1.anchor = java.awt.GridBagConstraints.WEST;
    gridBagConstraints1.weightx = 1.0;
    add(d_languageChoose, gridBagConstraints1);

    d_weaponProfLabel.setText("Weapon Proficiencies");
    gridBagConstraints1 = new java.awt.GridBagConstraints();
    gridBagConstraints1.gridx = 0;
    gridBagConstraints1.gridy = 4;
    gridBagConstraints1.insets = new java.awt.Insets(0, 0, 0, 10);
    gridBagConstraints1.anchor = java.awt.GridBagConstraints.WEST;
    add(d_weaponProfLabel, gridBagConstraints1);

    d_weaponProfChoose.setText("Choose");
    d_weaponProfChoose.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        weaponSelectPressed(evt);
      }
    });

    gridBagConstraints1 = new java.awt.GridBagConstraints();
    gridBagConstraints1.gridx = 1;
    gridBagConstraints1.gridy = 4;
    gridBagConstraints1.anchor = java.awt.GridBagConstraints.WEST;
    gridBagConstraints1.weightx = 1.0;
    add(d_weaponProfChoose, gridBagConstraints1);

  }//GEN-END:initComponents

  /**
   * This method is run when the weapon proficiency button is pressed.
   */
  private void weaponSelectPressed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_weaponSelectPressed
  {//GEN-HEADEREND:event_weaponSelectPressed
    PlayerCharacter pc = Globals.currentPC;
    if (pc != null)
    {
      pc.setDirty(true);
      Chooser lc = new Chooser();
      lc.setVisible(false);
      if (pc.weaponProfList().size()==0)
        pc.getAutoWeaponProfs();
      SortedSet selected = (SortedSet)pc.weaponProfList().clone();
      SortedSet stillAvailable = pc.getBonusWeaponProfs();
      selected.retainAll(stillAvailable);
      stillAvailable.removeAll(pc.weaponProfList());
      pc.weaponProfList().clear();
      selected.removeAll(pc.getAutoWeaponProfs());
      lc.setPool(pc.bonusWeaponChoices()-selected.size());
      lc.setAvailableList(new ArrayList(stillAvailable));
      lc.setSelectedList(new ArrayList(selected));
      pc.weaponProfList().removeAll(selected);
      lc.show();
      pc.weaponProfList().clear();
      pc.getAutoWeaponProfs();
      pc.weaponProfList().addAll(lc.getSelectedList());
      updateCharacterInfo();
    }
  }//GEN-LAST:event_weaponSelectPressed

  /**
   * This method is run when the language button is pressed.
   */
  private void languageSelectPressed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_languageSelectPressed
  {//GEN-HEADEREND:event_languageSelectPressed
    PlayerCharacter pc = Globals.currentPC;
    if (pc != null)
    {
      pc.setDirty(true);
      Chooser lc = new Chooser();
      lc.setVisible(false);
      SortedSet autoLangs = pc.getAutoLanguages();
      SortedSet langs = pc.languagesList();
      ArrayList selected = new ArrayList(langs.size());
      for(Iterator i = langs.iterator(); i.hasNext(); ){
        String lang = (String)i.next();
        if (!autoLangs.contains(lang))
          selected.add(lang);
      }
      Collections.sort(selected);
      lc.setSelectedList(selected);
      lc.setPool(pc.languageNum() - selected.size());
      lc.setAvailableList(new ArrayList(pc.getBonusLanguages()));
      lc.show();
      langs.clear();
      pc.getAutoLanguages();
      langs.addAll(lc.getSelectedList());
      updateCharacterInfo();
    }
  }//GEN-LAST:event_languageSelectPressed
  
  private void formComponentShown(java.awt.event.ComponentEvent evt)//GEN-FIRST:event_formComponentShown
  {//GEN-HEADEREND:event_formComponentShown
    requestDefaultFocus();
    updateCharacterInfo();
  }//GEN-LAST:event_formComponentShown
  
  private void updateCharacterInfo()
  {
    if (Globals.currentPC != null)
    {
      Globals.currentPC.getAutoWeaponProfs();
      ArrayList specialAbilities = Globals.currentPC.specialAbilityList();
      SortedSet languages = Globals.currentPC.languagesList();
      SortedSet weaponProfs = Globals.currentPC.weaponProfList();
      if (specialAbilities.size() > 0)
      {
        d_specAbilityText.setText
        (Globals.stringForList(specialAbilities.iterator(), s_delim));
      }
      else
      {
        d_specAbilityText.setText(s_none);
      }
      if (languages.size() > 0)
      {
        d_languageText.setText
        (Globals.stringForList(languages.iterator(), s_delim));
      }
      else
      {
        d_languageText.setText(s_none);
      }
      if (weaponProfs.size() > 0)
      {
        d_weaponProfText.setText
        (Globals.stringForList(weaponProfs.iterator(), s_delim));
      }
      else
      {
        d_weaponProfText.setText(s_none);
      }
    }
    else
    {
      d_specAbilityText.setText(s_none);
      d_languageText.setText(s_none);
      d_weaponProfText.setText(s_none);
    }
  }
  
  private static final String s_none = "None";
  private static final String s_delim = ", ";
  
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JLabel d_specAbilityLabel;
  private javax.swing.JScrollPane d_specAbilitiesArea;
  private javax.swing.JTextArea d_specAbilityText;
  private javax.swing.JScrollPane d_languageArea;
  private javax.swing.JTextArea d_languageText;
  private javax.swing.JScrollPane d_weaponProfArea;
  private javax.swing.JTextArea d_weaponProfText;
  private javax.swing.JLabel d_languageLabel;
  private javax.swing.JButton d_languageChoose;
  private javax.swing.JLabel d_weaponProfLabel;
  private javax.swing.JButton d_weaponProfChoose;
  // End of variables declaration//GEN-END:variables
  
}
