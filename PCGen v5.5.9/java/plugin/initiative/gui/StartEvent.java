/*
 *  Initiative - A role playing utility to track turns
 *  Copyright (C) 2002 Devon D Jones
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 *
 *  The author of this program grants you the ability to use this code
 *  in conjunction with code that is covered under the Open Gaming License
 *
 *  CastSpell.java
 *
 *  Created on January 16, 2002, 3:08 PM
 */
package plugin.initiative.gui;

import gmgen.plugin.Event;
import pcgen.core.SettingsHandler;
import plugin.initiative.InitiativePlugin;

/**
 *@author     devon
 *@created    April 7, 2003
 */
public class StartEvent extends javax.swing.JDialog {

	/**
	 *  Creates new form CastSpell - used when you do know who your frame is
	 *
	 *@param  parent      Parent form
	 *@param  modal       is modal?
	 *@param  initiative  Initiative panel
	 */
	public StartEvent(java.awt.Frame parent, boolean modal, Initiative initiative) {
		super(parent, modal);
		initComponents();
		this.initiative = initiative;
		initCheckBox();
	}


	/**
	 *  Constructor for the CastSpell object - used when you don't know who your frame is
	 *
	 *@param  initiative  Initiative panel
	 */
	public StartEvent(Initiative initiative) {
		initComponents();
		this.initiative = initiative;
		initCheckBox();
	}


	/**
	 *  Constructor for the CastSpell object - used when you know who your frame is
	 *  and you want to cast the spell for a particular player
	 *
	 *@param  parent      Parent form
	 *@param  modal       is modal
	 *@param  initiative  Initiative panel
	 *@param  player      player name
	 *@param  init        player's initiative
	 */
	public StartEvent(java.awt.Frame parent, boolean modal, Initiative initiative, String player, int init) {
		super(parent, modal);
		initComponents();
		this.initiative = initiative;
		tName.grabFocus();
		tPlayer.setText(player);
		sInit.setValue(init);
		setInit();
		initCheckBox();
	}


	/**
	 *  Constructor for the CastSpell object - used when you don't know who your frame is
	 *  and you want to cast the spell for a particular player
	 *
	 *@param  initiative  Initiative panel
	 *@param  player      player name
	 *@param  init        player's initiative
	 */
	public StartEvent(Initiative initiative, String player, int init) {
		initComponents();
		this.initiative = initiative;
		tName.grabFocus();
		tPlayer.setText(player);
		sInit.setValue(init);
		setInit();
		initCheckBox();
	}


	/**
	 *  This method is called from within the constructor to initialize the form.
	 *  WARNING: Do NOT modify this code. The content of this method is always
	 *  regenerated by the Form Editor.
	 */
	private void initComponents() {//GEN-BEGIN:initComponents
		java.awt.GridBagConstraints gridBagConstraints;

		jLabel1 = new javax.swing.JLabel();
		jLabel2 = new javax.swing.JLabel();
		jLabel3 = new javax.swing.JLabel();
		tName = new javax.swing.JTextField();
		tPlayer = new javax.swing.JTextField();
		sDuration = new javax.swing.JSlider();
		bSave = new javax.swing.JButton();
		bCancel = new javax.swing.JButton();
		jLabel5 = new javax.swing.JLabel();
		jLabel6 = new javax.swing.JLabel();
		sInit = new javax.swing.JSlider();
		cbAlert = new javax.swing.JCheckBox();
		lDuration = new javax.swing.JTextField();
		lInit = new javax.swing.JTextField();
		jLabel4 = new javax.swing.JLabel();
		tEffect = new javax.swing.JTextField();

		getContentPane().setLayout(new java.awt.GridBagLayout());

		setTitle("Start Event Timer");
		addWindowListener(new java.awt.event.WindowAdapter() {
			public void windowClosing(java.awt.event.WindowEvent evt) {
				closeDialog(evt);
			}
		});

		jLabel1.setText("Name");
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
		gridBagConstraints.insets = new java.awt.Insets(10, 5, 10, 0);
		getContentPane().add(jLabel1, gridBagConstraints);

		jLabel2.setText("Player");
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 1;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
		gridBagConstraints.insets = new java.awt.Insets(0, 5, 10, 0);
		getContentPane().add(jLabel2, gridBagConstraints);

		jLabel3.setText("Duration");
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 3;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
		gridBagConstraints.insets = new java.awt.Insets(0, 5, 10, 0);
		getContentPane().add(jLabel3, gridBagConstraints);

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.gridwidth = 2;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints.ipadx = 37;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
		gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
		getContentPane().add(tName, gridBagConstraints);

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 1;
		gridBagConstraints.gridwidth = 2;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints.ipadx = 37;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
		getContentPane().add(tPlayer, gridBagConstraints);

		sDuration.setMinimum(1);
		sDuration.setValue(1);
		sDuration.addKeyListener(new java.awt.event.KeyAdapter() {
			public void keyPressed(java.awt.event.KeyEvent evt) {
				sDurationKeyPressed(evt);
			}
			public void keyReleased(java.awt.event.KeyEvent evt) {
				sDurationKeyReleased(evt);
			}
		});

		sDuration.addMouseListener(new java.awt.event.MouseAdapter() {
			public void mousePressed(java.awt.event.MouseEvent evt) {
				sDurationMousePressed(evt);
			}
			public void mouseReleased(java.awt.event.MouseEvent evt) {
				sDurationMouseReleased(evt);
			}
		});

		sDuration.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
			public void mouseDragged(java.awt.event.MouseEvent evt) {
				sDurationMouseDragged(evt);
			}
		});

		sDuration.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
			public void propertyChange(java.beans.PropertyChangeEvent evt) {
				sDurationPropertyChange(evt);
			}
		});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 2;
		gridBagConstraints.gridy = 3;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints.ipadx = -80;
		gridBagConstraints.ipady = 4;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
		getContentPane().add(sDuration, gridBagConstraints);

		bSave.setText("Save");
		bSave.addMouseListener(new java.awt.event.MouseAdapter() {
			public void mouseClicked(java.awt.event.MouseEvent evt) {
				bSaveMouseClicked(evt);
			}
		});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 7;
		gridBagConstraints.insets = new java.awt.Insets(0, 5, 10, 0);
		getContentPane().add(bSave, gridBagConstraints);

		bCancel.setText("Cancel");
		bCancel.addMouseListener(new java.awt.event.MouseAdapter() {
			public void mouseClicked(java.awt.event.MouseEvent evt) {
				bCancelMouseClicked(evt);
			}
		});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 7;
		gridBagConstraints.gridwidth = 2;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
		getContentPane().add(bCancel, gridBagConstraints);

		jLabel5.setForeground(new java.awt.Color(204, 204, 204));
		jLabel5.setText("500");
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
		gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 10);
		getContentPane().add(jLabel5, gridBagConstraints);

		jLabel6.setText("Initiative");
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 4;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
		gridBagConstraints.insets = new java.awt.Insets(0, 5, 5, 0);
		getContentPane().add(jLabel6, gridBagConstraints);

		sInit.setMaximum(40);
		sInit.setMinimum(1);
		sInit.setValue(1);
		sInit.addKeyListener(new java.awt.event.KeyAdapter() {
			public void keyPressed(java.awt.event.KeyEvent evt) {
				sInitKeyPressed(evt);
			}
			public void keyReleased(java.awt.event.KeyEvent evt) {
				sInitKeyReleased(evt);
			}
		});

		sInit.addMouseListener(new java.awt.event.MouseAdapter() {
			public void mousePressed(java.awt.event.MouseEvent evt) {
				sInitMousePressed(evt);
			}
			public void mouseReleased(java.awt.event.MouseEvent evt) {
				sInitMouseReleased(evt);
			}
		});

		sInit.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
			public void mouseDragged(java.awt.event.MouseEvent evt) {
				sInitMouseDragged(evt);
			}
		});

		sInit.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
			public void propertyChange(java.beans.PropertyChangeEvent evt) {
				sInitPropertyChange(evt);
			}
		});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 2;
		gridBagConstraints.gridy = 4;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
		getContentPane().add(sInit, gridBagConstraints);

		cbAlert.setText("Alert when event Completes/Occurs");
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 5;
		gridBagConstraints.gridwidth = 2;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
		gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 0);
		getContentPane().add(cbAlert, gridBagConstraints);

		lDuration.setText("1");
		lDuration.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				lDurationActionPerformed(evt);
			}
		});

		lDuration.addFocusListener(new java.awt.event.FocusAdapter() {
			public void focusLost(java.awt.event.FocusEvent evt) {
				lDurationFocusLost(evt);
			}
		});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 3;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
		getContentPane().add(lDuration, gridBagConstraints);

		lInit.setText("1");
		lInit.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				lInitActionPerformed(evt);
			}
		});

		lInit.addFocusListener(new java.awt.event.FocusAdapter() {
			public void focusLost(java.awt.event.FocusEvent evt) {
				lInitFocusLost(evt);
			}
		});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 4;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
		getContentPane().add(lInit, gridBagConstraints);

		jLabel4.setText("Effect");
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 2;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
		gridBagConstraints.insets = new java.awt.Insets(0, 5, 10, 0);
		getContentPane().add(jLabel4, gridBagConstraints);

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 2;
		gridBagConstraints.gridwidth = 2;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
		getContentPane().add(tEffect, gridBagConstraints);

		pack();
	}//GEN-END:initComponents

	private void lDurationFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_lDurationFocusLost
		String text = lDuration.getText();
		try {
			new Integer(text);
		}
		catch(NumberFormatException e) {
			setDuration();
		}
	}//GEN-LAST:event_lDurationFocusLost

	private void lInitFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_lInitFocusLost
		String text = lInit.getText();
		try {
			new Integer(text);
		}
		catch(NumberFormatException e) {
			setInit();
		}
	}//GEN-LAST:event_lInitFocusLost

	private void lInitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lInitActionPerformed
		String text = lInit.getText();
		try {
			new Integer(text);
		}
		catch(NumberFormatException e) {
			setInit();
		}
	}//GEN-LAST:event_lInitActionPerformed

	private void lDurationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lDurationActionPerformed
		String text = lDuration.getText();
		try {
			new Integer(text);
		}
		catch(NumberFormatException e) {
			setDuration();
		}
	}//GEN-LAST:event_lDurationActionPerformed


	private void sInitPropertyChange(java.beans.PropertyChangeEvent evt) {
		//GEN-FIRST:event_sInitPropertyChange
		// Add your handling code here:
		setInit();
	}
	//GEN-LAST:event_sInitPropertyChange


	private void sInitMouseDragged(java.awt.event.MouseEvent evt) {
		//GEN-FIRST:event_sInitMouseDragged
		// Add your handling code here:
		setInit();
	}
	//GEN-LAST:event_sInitMouseDragged


	private void sInitMouseReleased(java.awt.event.MouseEvent evt) {
		//GEN-FIRST:event_sInitMouseReleased
		// Add your handling code here:
		setInit();
	}
	//GEN-LAST:event_sInitMouseReleased


	private void sInitMousePressed(java.awt.event.MouseEvent evt) {
		//GEN-FIRST:event_sInitMousePressed
		// Add your handling code here:
		setInit();
	}
	//GEN-LAST:event_sInitMousePressed


	private void sInitKeyReleased(java.awt.event.KeyEvent evt) {
		//GEN-FIRST:event_sInitKeyReleased
		// Add your handling code here:
		setInit();
	}
	//GEN-LAST:event_sInitKeyReleased


	private void sInitKeyPressed(java.awt.event.KeyEvent evt) {
		//GEN-FIRST:event_sInitKeyPressed
		// Add your handling code here:
		setInit();
	}
	//GEN-LAST:event_sInitKeyPressed


	private void bSaveMouseClicked(java.awt.event.MouseEvent evt) {
		//GEN-FIRST:event_bSaveMouseClicked
		// Add your handling code here:
		// Add your handling code here:

		initiative.initList.add(new Event(tName.getText(), tPlayer.getText(), tEffect.getText(),sDuration.getValue(), sInit.getValue(), cbAlert.isSelected()));
		initiative.writeToCombatTabWithRound(" Event Timer " + tName.getText() + " Started");
		initiative.refreshTable();
		initiative.grabFocus();
		initiative.focusNextInit();
		setVisible(false);
		dispose();
	}
	//GEN-LAST:event_bSaveMouseClicked


	private void sDurationMouseReleased(java.awt.event.MouseEvent evt) {
		//GEN-FIRST:event_sDurationMouseReleased
		// Add your handling code here:
		setDuration();
	}
	//GEN-LAST:event_sDurationMouseReleased


	private void sDurationMousePressed(java.awt.event.MouseEvent evt) {
		//GEN-FIRST:event_sDurationMousePressed
		// Add your handling code here:
		setDuration();
	}
	//GEN-LAST:event_sDurationMousePressed


	private void sDurationMouseDragged(java.awt.event.MouseEvent evt) {
		//GEN-FIRST:event_sDurationMouseDragged
		// Add your handling code here:
		setDuration();
	}
	//GEN-LAST:event_sDurationMouseDragged


	private void sDurationKeyReleased(java.awt.event.KeyEvent evt) {
		//GEN-FIRST:event_sDurationKeyReleased
		// Add your handling code here:
		setDuration();
	}
	//GEN-LAST:event_sDurationKeyReleased


	private void sDurationKeyPressed(java.awt.event.KeyEvent evt) {
		//GEN-FIRST:event_sDurationKeyPressed
		// Add your handling code here:
		setDuration();
	}
	//GEN-LAST:event_sDurationKeyPressed


	private void bCancelMouseClicked(java.awt.event.MouseEvent evt) {
		//GEN-FIRST:event_bCancelMouseClicked
		// Add your handling code here:
		setVisible(false);
		dispose();
	}
	//GEN-LAST:event_bCancelMouseClicked


	private void sDurationPropertyChange(java.beans.PropertyChangeEvent evt) {
		//GEN-FIRST:event_sDurationPropertyChange
		// Add your handling code here:
		setDuration();
	}
	//GEN-LAST:event_sDurationPropertyChange


	/**
	 *  Closes the dialog
	 *
	 *@param  evt  close event
	 */
	private void closeDialog(java.awt.event.WindowEvent evt) {
		//GEN-FIRST:event_closeDialog
		setVisible(false);
		dispose();
	}
	//GEN-LAST:event_closeDialog


	/**
	 * Sets the duration label from the slider
	 */

	public void setDuration() {
		lDuration.setText("" + sDuration.getValue());
	}


	/**  Sets the init attribute of the CastSpell object */
	public void setInit() {
		lInit.setText("" + sInit.getValue());
	}

	public void initCheckBox() {
		boolean box = SettingsHandler.getGMGenOption(InitiativePlugin.LOG_NAME + ".ShowEvents", true);
		if(box) {
			cbAlert.setSelected(false);
		}
		else {
			cbAlert.setSelected(true);
		}
	}


	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JLabel jLabel4;
	private javax.swing.JTextField lDuration;
	private javax.swing.JButton bSave;
	private javax.swing.JLabel jLabel1;
	private javax.swing.JLabel jLabel3;
	private javax.swing.JTextField tPlayer;
	private javax.swing.JLabel jLabel2;
	private javax.swing.JCheckBox cbAlert;
	private javax.swing.JSlider sDuration;
	private javax.swing.JTextField lInit;
	private javax.swing.JTextField tName;
	private javax.swing.JTextField tEffect;
	private javax.swing.JSlider sInit;
	private javax.swing.JLabel jLabel6;
	private javax.swing.JButton bCancel;
	private javax.swing.JLabel jLabel5;
	// End of variables declaration//GEN-END:variables
	/**  The initiative panel */
	public Initiative initiative;
}

