<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
    "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
  <title>MapperXML: Application Architecture</title>
  <link href="common/style.css" rel="stylesheet" type="text/css">
</head>

<body>

<table width="100%" border="0" cellpadding="10" cellspacing="0"
style="page-break-before: always">
  <tbody>
    <tr valign="top">
      <td colspan="2" bgcolor="#e6e6ff"><img src="common/mapperlogo.gif"
        name="Graphic1" alt="Mapper Logo" align="bottom" width="500"
        height="115" border="0"></td>
    </tr>
    <tr>
      <td colspan="2" width="100%" valign="top" bgcolor="#0000ff"
      style="font-size: 3pt">.</td>
    </tr>
    <tr valign="top">
      <td width="15%" bgcolor="#9999cc">
        <div class="leftnav">
        <!--#include virtual="common/leftnavmain.shtml" -->
        </div>
      </td>
      <td width="85%"><h1>6. HTML Components</h1>

        <h2>6.1 HTMLInputText</h2>

        <h2>6.2 HTMLTextArea</h2>

        <h2>6.3 HTMLAnchorURL</h2>

        <h2>6.4 HTMLSelect</h2>

        <p>This components is a peer component for the &lt;Select&gt; tag in an HTML
        form. This component is a specialization of the <tt>SelectField</tt>.
        Like the <tt>SelectField</tt>, this component (using a
        <tt>DefaultSelectModel</tt>), can display a selection from a
        list of objects. It can also change the selection from user input.</p>

        <p>The selection is made and displayed using the property indicated by
        the <tt>displayPropertyName</tt>. The <tt>displayPropertyName</tt>
        is effectively the "selection key". If the <tt>displayPropertyName</tt>
        is null or blank, then the <tt>toString</tt> method is used instead.
        For example, given a list of Address objects, and a
        <tt>displayPropertyName</tt> of "zipCode", the display value for
        "Juneau, AK 99801 USA" would be "99801". To change the selection, you would
        supply a different zipCode from the list.</p>

        <p>The HTMLSelect uses a specialized renderer which will create a list
        of html &lt;Option&gt; tags with the displayPropertyName value for each
        item in the list. Using the same example as above, after rendering the
        document would contain:</p>

        <pre>
        &lt;select name="zip" id="zip"&gt;
          &lt;option&gt;99801&lt;/option&gt;
          &lt;option&gt;99824&lt;/option&gt;
          &lt;option&gt;99827&lt;/option&gt;
        &lt;/select&gt;
        </pre>

        <p>This component can function in three different ways, depending on the
        properties you set:</p>

        <ul>
         <li>input only - set the <tt>parameter</tt> property.</li>
         <li>output only - set the <tt>id</tt> property.</li>
         <li>input and output - set both the <tt>parameter</tt> and
         <tt>id</tt> properties.</li>
        </ul>

        <p>When used for output, the value is rendered in the XML document  as a
        text node by default. If you want the value to be rendered to
        an attribute of the node instead, you must change the <tt>renderer</tt>
        to an <tt>AttributeTextFieldRenderer</tt> and the the <tt>attribute</tt>
        property to the name of the attribute.</p>

        <p>When used for input, this component receives its value from the
        <tt>InputDispatcher</tt> AFTER the <tt>openForm</tt> method of the
        <tt>ServletForm</tt> by default.  If you want this component to receive
        its input earlier (at the same time as <tt>Parameters</tt>), set the
        <tt>earlyInputNotify</tt> property to <tt>true</tt>.</p>

        <p>By default, this component uses a <tt>DefaultSelectModel</tt>.
        You can change this by overriding the <tt>createDefaultModel</tt> method
        or explicitly setting the <tt>model</tt> property.</p>

        <b>Setting the List</b>
        <p>
        The <tt>list</tt> must be a type of <tt>CollectionValueHolder</tt>
        (example: <tt>VOCollectionValueHolder</tt> or
        <tt>VOListValueHolder</tt>).
        The holder can contain any type of object (but they must all be instances
        of the same class).
        <p>
        If the <tt>list</tt> is an <tt>ObjectArrayValueHolder</tt>, then the
        <tt>toString()</tt> method is used as the display value (regardless of
        the <tt>displayPropertyName</tt>). If used in the bound mode, the whole
        object itself is stored in the target ValueHolder's object (regardless of
        the property names listed in the <tt>setListPropertyNames</tt> method).
        It is important to make sure that the <tt>valueHolder</tt> property
        is the same type as the objects in the <tt>ObjectArrayValueHolder</tt>
        or a <tt>ModelException</tt> will occur.
        <p>
        You can also preset the <tt>list</tt> in the constructor by passing it an
        array of Objects to be used for the <tt>list</tt>. The resulting
        <tt>list</tt> will be an <tt>ObjectArrayValueHolder</tt>.
        <p>
        The following is an example of this usage:</p>

        <pre>
          SelectField color = new SelectField(new String[] {
              "Red", "Orange", "Yellow", "Green", "Blue", "Indigo", "Violet",
              });
          ...
          private void jbInit() throws Exception {
            ...
            color.setParameter("color");
            color.setId("color");
            ...
            this.add(color);
          }
        </pre>

        <p>This component can be used in a variety of ways. It can be used in an
        un-bound mode, where the current selection is maintained internally. It can
        also be used in a bound mode where the current selection is propagated to a
        value holder. When used in the bound mode, either a single property, or
        multiple properties can be set in the value holder. The following sections
        describe the required settings to make for each of the modes.</p>

        <b>Un-bound Mode (uses internal VariantValueHolder)</b>
        <p>
        When used in this mode this component uses an internal
        <tt>VariantValueHolder</tt> to hold the current selection. By default a
        <tt>VariantValueHolder</tt> is created with a data type of
        <tt>String</tt>. To set a different data type use the constructor which
        takes a data type as a parameter. (example
        <tt>new SelectField(DataTypes.TYPE_INT)</tt>).
        <p>
        To use this component in the un-bound mode, you must set the following
        properties:
        <ul>
        <li><tt>list</tt> - should be set to a type of
        <tt>CollectionHolder</tt> which holds the list of options
        (see "Setting the List").
        </li>
        <li><tt>displayPropertyName</tt> - the name of the property to display
        (property of objects in list). Example: given a list of "Location" objects
        with a property called "locationName", use
        <tt>setDisplayPropertyName("locationName")</tt>
        to display the zipCode. IMPORTANT - The displayed property choosen must
        result in a unique list of values, otherwise the intended value may not be
        selected/displayed.
        </li>
        <li><tt>listPropertyNames</tt> - set a single source property name in the
        <tt>list</tt> objects. Example: Given a list containing "Location"
        objects which has properties "zipCode", "cityName", "stateAbbr", and
        "country", to make the zipcode the internal value use
        <tt>setListPropertyNames(new String[] {"zipCode"})</tt>.
        <p>
        If the <tt>list</tt> is an <tt>ObjectArrayValueHolder</tt>, then
        the property name should always be a single "value" (which is the default).
        </li>
        <li><tt>propertyName</tt> - must be "value" (which is the default).
        </li>
        <li><tt>nullDisplay</tt> - String to display in list for null selection.
        Example: "--- Nothing Selected ---"
        </li>
        </ul>
        <b>Bound Mode</b>
        <p>
        To use this component in the bound mode, use the same properties as
        described in the Un-bound Mode, plus the following additional properties:
        <ul>
        <li><tt>valueHolder</tt> - should be set to the target
        <tt>ValueHolder</tt> which contains the current selection and will be
        updated if the selection is changed.
        </li>
        <li><tt>propertyName</tt> - set this to the first (or only)
        <tt>ValueHolder</tt> object property name which will be bound to the
        selection. Example: given a <tt>ValueHolder</tt> with an
        "Address" object which has a "zipCode" property, use
        <tt>setPropertyName("zipCode")</tt> to store the current selection in
        the "Address.zipCode" property.
        </li>
        <li><tt>propertyNames</tt> - use this when you want to set more than
        1 property in the <tt>ValueHolder</tt> object. Example: assume you want
        to set not only the "zipCode" property, but also the "city", "state" and
        "country" properties, use
        <tt>setPropertyNames(new String[] {"zipCode","city","state","country"})</tt>
        </li>
        <li><tt>listPropertyNames</tt> - set the to the source property name(s)
        in the <tt>list</tt> objects. IMPORTANT - The name(s) of the
        <tt>listPropertyNames</tt> properties MUST be
        in the same ORDER as the <tt>propertyName(s)</tt>. The names in the
        <tt>listPropertNames</tt> may be different than the names in the
        <tt>propertyNames</tt> since they are associated
        with in objects in the <tt>list</tt>, not the <tt>valueHolder</tt>.
        Example: Given a <tt>list</tt>
        containing "Location" objects which has properties "zipCode", "cityName",
        "stateAbbr", and "country", for a single property use
        <tt>setListPropertyNames(new String[] {"zipCode"})</tt>. For
        multiple properties use
        <tt>setListPropertyNames(new String[] {"zipCode", "cityName", "stateAbbr",
        "country"})</tt>
        <p>
        If the <tt>list</tt> is an <tt>ObjectArrayValueHolder</tt>, then
        the property name should always be a single "value" (which is the default).
        </li>
        </ul>

        <b>Other Important Information</b>
        <p>
        When a selection is made, the values are copied from the properties in the
        <tt>list</tt> to the properties in the <tt>valueHolder</tt> object.
        The property names in <tt>propertyNames[]</tt> and
        <tt>listPropertyNames[]</tt> must appear in a corresponding order.
        <p>
        A "null" item will always be added to the <tt>displayOptionList</tt>.
        When the "null" item is selected, a null will be assigned to the
        <tt>propertyNames[]</tt> in the <tt>valueHolder</tt> object.
        The actual "null" item to to display is defined by the
        <tt>nullDisplay</tt> (default is "--none--").
        <p>
        The <tt>format</tt> and <tt>formatPattern</tt> govern the display
        property in this component.  The <tt>getText</tt> method returns the
        formatted display property, while the <tt>setText</tt>
        method changes the current selection to one whose display matches the given
        value. If you attempt to <tt>setText</tt> for an item that is not in
        the list, a <tt>NotInListException</tt> will be thrown.

        <h2>6.5 HTMLCheckbox</h2>

        <p>HTMLCheckBox is a peer component to an HTML input type checkbox.
        This field is for a stand-alone checkbox and maintains its checked/unchecked
        state.
        </p>
        <p>This component uses an HTMLCheckboxFieldRenderer to render its value.
        If the CheckboxModel isSelected returns true, then the renderer adds
        the "checked" attribute to the input tag, otherwise it removed the attribute.
        </p>
        <p>The HTML checkbox has a unique behavior in that it only sends a value if it
        is checked.  It does not send anything back if it is un-checked.  This
        behavior requires the use of a defaultValue or uncheckedValue.
        </p>
        <p>The <tt>unselectedValue</tt> is used as the <tt>defaultValue</tt>
        for this component. If the <tt>unselectedValue</tt> is not null it will
        be used during parameter or input dispatching whenever the checkbox is NOT
        checked (no parameter is sent). In that case, the <tt>unselectedValue</tt>
        will be used as the value for the InputEvent.
        </p>
        <p><b>Limitation:</b> Since input processing will ALWAYS set the value to
        either the <tt>selectedValue</tt> (if input present) or
        <tt>unselectedValue</tt> (if no input is present), you will want to
        disable input processing when simply preseting or displaying values. With an
        HTML checkbox, there is no way to distinguish between an unchecked box or
        no input submission. To disable input processing, either set the
        <tt>ServletForm's</tt> <tt>enableInput</tt> property to
        <tt>false</tt>, or temporarily set the <tt>HTMLCheckBox's</tt>
        <tt>parameter</tt> property to null or blank.
        </p>
        <p>This component uses a <tt>DefaultCheckboxModel</tt> to manage the
        state. There are only two states for this component: selected or
        not-selected.</p>

        <p>To use this component you must first set the the following properties
        as indicated:</p>
        <ul>
        <li><tt>selectedValue</tt> - the text value which indicates a
        "selected" state. The default value is "true".</li>
        <li><tt>unselectedValue</tt> - the text value which indicates an
        "un-selected" state. The default value is "" (blank) which will result
        in a <tt>null</tt> value being stored in the <tt>valueHolder</tt></li>
        </ul>

        <p>This component can function in three different ways, depending on the
        properties you set:</p>

        <ul>
         <li>input only - set the <tt>parameter</tt> property.</li>
         <li>output only - set the <tt>id</tt> property.</li>
         <li>input and output - set both the <tt>parameter</tt> and
         <tt>id</tt> properties.</li>
        </ul>

        <p>When used for input, this component receives its value from the
        <tt>InputDispatcher</tt> AFTER the <tt>openForm</tt> method of the
        <tt>ServletForm</tt> by default.  If you want this component to receive
        its input earlier (at the same time as <tt>Parameters</tt>), set the
        <tt>earlyInputNotify</tt> property to <tt>true</tt>.</p>

        <p>By default, this component uses a <tt>DefaultCheckboxModel</tt>.
        You can change this by overriding the <tt>createDefaultModel</tt> method
        or explicitly setting the <tt>model</tt> property.</p>

        <p>This component can be used in a variety of ways. It can be used in an
        un-bound mode, where the current selected state is maintained internally.
        It can also be used in a bound mode where the current selected state is
        propagated to a value holder. When used in the bound mode a single property
        can be set in the value holder. The following sections describe the required
        settings to make for each of the modes.</p>

        <b>Un-bound Mode</b>

        <p>To use this component in the un-bound mode, you can set the following
        properties:</p>
        <ul>
        <li><tt>selectedValue</tt> - the text value which indicates a
        "selected" state. The default value is "true".</li>
        <li><tt>unselectedValue</tt> - the text value which indicates an
        "un-selected" state. The default value is "" (blank) which will result
        in a <tt>null</tt> value being stored in the <tt>valueHolder</tt></li>
        </ul>

        <b>Bound Mode</b>

        <p>To use this component in the bound mode, use the same properties as
        described in the Un-bound Mode, plus the following additional properties:</p>
        <ul>
        <li><tt>valueHolder</tt> - should be bound to the
        <tt>ValueHolder</tt> which contains the current selected state and is to
        be updated if the state is changed.</li>

        <li><tt>propertyName</tt> - set this to the property
        name (belonging to the object in the <tt>ValueHolder</tt>) which will
        be bound to the selected state. Example: given a <tt>ValueHolder</tt>
        with an "Address" object which has a "active" property, use
        <tt>setPropertyName("active")</tt> to store the current selected state in
        the "Address.active" property.</li>
        </ul>

      </td>
    </tr>
    <tr>
      <td colspan="2" width="100%" valign="top" bgcolor="#9999ff"
      style="font-size: 3pt">.</td>
    </tr>
  </tbody>
</table>

<div class="footer">
<!--#include virtual="common/footer.shtml" -->
</div>
</body>
</html>
