###############################################################################
# Copyright (c) 2000, 2003 IBM Corporation and others.
# All rights reserved. This program and the accompanying materials 
# are made available under the terms of the Common Public License v1.0
# which accompanies this distribution, and is available at
# http://www.eclipse.org/legal/cpl-v10.html
# 
# Contributors:
#     IBM Corporation - initial API and implementation
###############################################################################
### JavaModel messages.

### hierarchy
hierarchy.nullProject = Project argument cannot be null.
hierarchy.nullRegion = Region cannot be null.
hierarchy.nullFocusType = Type focus cannot be null.
hierarchy.creating = Creating type hierarchy...
hierarchy.creatingOnType = Creating type hierarchy on {0}...

### java element
element.doesNotExist = {0} does not exist.
element.invalidClassFileName = Class file name must end with .class.
element.cannotReconcile = Must create reconciler on a working copy.
element.reconciling = Reconciling...
element.attachingSource = Attaching source...
element.invalidType = Type is not one of the defined constants.
element.classpathCycle = A cycle was detected in the project''s classpath.
element.onlyOneJavaModel = Cannot instantiate more than one Java Model.
element.projectDoesNotExist = Project {0} not present
element.invalidResourceForProject = Illegal argument - must be one of IProject, IFolder, or IFile
element.nullName = Name cannot be null.
element.nullType = Type cannot be null.
element.illegalParent = Illegal parent argument.
element.notPresent = Not present

### java model operations
operation.needElements = Operation requires one or more elements.
operation.needName = Operation requires a name.
operation.needPath = Operation requires a path.
operation.needAbsolutePath = Operation requires an absolute path. Relative path specified was: ''{0}''
operation.needString = Operation requires a String.
operation.notSupported = Operation not supported for specified element type(s):
operation.cancelled = Operation cancelled.
operation.nullContainer = Container cannot be null.
operation.nullName = Name cannot be null.
operation.copyElementProgress = Copying elements...
operation.moveElementProgress = Moving elements...
operation.renameElementProgress = Renaming elements...
operation.copyResourceProgress = Copying resources...
operation.moveResourceProgress = Moving resources...
operation.renameResourceProgress = Renaming resources...
operation.createUnitProgress = Creating a compilation unit...
operation.createFieldProgress = Creating a field...
operation.createImportsProgress = Creating imports...
operation.createInitializerProgress = Creating an initializer...
operation.createMethodProgress = Creating a method...
operation.createPackageProgress = Creating a package declaration...
operation.createPackageFragmentProgress = Creating package fragment(s)...
operation.createTypeProgress = Creating a type...
operation.deleteElementProgress = Deleting elements...
operation.deleteResourceProgress = Deleting resources...
operation.cannotRenameDefaultPackage = Default package cannot be renamed.
operation.pathOutsideProject = Path ''{0}'' must denote location inside project {1}
operation.sortelements = Sorting elements...

### working copy
workingCopy.commit = Committing working copy...

### build status messages
build.preparingBuild = Preparing for build
build.readStateProgress = Reading saved built state for project {0}
build.saveStateProgress = Saving built state for project {0}
build.saveStateComplete = Saved in {0} ms
build.readingDelta = Reading resource change information for {0}
build.analyzingDeltas = Analyzing deltas
build.analyzingSources = Analyzing sources
build.cleaningOutput = Cleaning output folder
build.copyingResources = Copying resources to the output folder
build.compiling = Compiling {0}
build.foundHeader = Found
build.fixedHeader = Fixed
build.oneError = 1 error
build.oneWarning = 1 warning
build.multipleErrors = {0} errors
build.multipleWarnings = {0} warnings
build.done = Build done

### build errors
build.wrongFileFormat = Wrong file format.
build.cannotSaveState = Error saving last build state for project {0}.
build.cannotSaveStates = Error saving build states.
build.initializationError = Builder initialization error.
build.serializationError = Builder serialization error.

### build inconsistencies
build.duplicateClassFile = The type {0} is already defined.
build.duplicateResource = The resource is a duplicate and was not copied to the output folder.
build.inconsistentClassFile = A class file was not written. The project may be inconsistent, if so try refreshing this project and rebuilding it.
build.inconsistentProject = The project was not built due to "{0}". Fix the problem, then try refreshing this project and rebuilding it since it may be inconsistent.
build.incompleteClassPath = The project was not built since its classpath is incomplete. Cannot find the class file for {0}. Fix the classpath then try rebuilding this project.
build.missingSourceFile = The project was not built since the source file {0} could not be read.
build.prereqProjectHasClasspathProblems = The project was not built since it depends on {0}, which has classpath problems.
build.prereqProjectMustBeRebuilt = The project cannot be built until {0} is rebuilt. Rebuilding all projects is recommended.
build.abortDueToClasspathProblems = The project was not built due to classpath errors (incomplete or involved in cycle).

### status
status.cannotUseDeviceOnPath = Operation requires a path with no device. Path specified was: {0}
status.coreException = Core exception.
status.defaultPackeReadOnly = Default package is read-only.
status.evaluationError = Evaluation error: {0}.
status.JDOMError = JDOM error.
status.IOException = I/O exception.
status.indexOutOfBounds = Index out of bounds.
status.invalidContents = Invalid contents specified.
status.invalidDestination = Invalid destination: ''{0}''.
status.invalidName = Invalid name specified: {0}.
status.invalidPackage = Invalid package: {0}.
status.invalidPath = Invalid path: ''{0}''.
status.invalidProject = Invalid project: {0}.
status.invalidResource = Invalid resource: {0}.
status.invalidResourceType = Invalid resource type for {0}.
status.invalidSibling = Invalid sibling: {0}.
status.nameCollision = {0} already exists in target.
status.noLocalContents = Cannot find local contents for resource: {0}
status.OK = OK
status.readOnly = {0} is read-only.
status.targetException = Target exception.
status.updateConflict = Update conflict.

### classpath
classpath.buildPath = Build path
classpath.cannotNestEntryInEntry = Cannot nest ''{0}'' inside ''{1}''. To enable the nesting exclude ''{2}'' from ''{1}''.
classpath.cannotNestEntryInLibrary = Cannot nest ''{0}'' inside library ''{1}''.
classpath.cannotNestEntryInOutput = Cannot nest ''{0}'' inside output folder ''{1}''.
classpath.cannotNestOutputInEntry = Cannot nest output folder ''{0}'' inside ''{1}''.
classpath.cannotNestOutputInOutput = Cannot nest output folder ''{0}'' inside output folder ''{1}''.
classpath.cannotReadClasspathFile = Unable to read ''{0}/.classpath'' file.
classpath.cannotReferToItself = Project cannot reference itself: {0}
classpath.cannotUseDistinctSourceFolderAsOutput = Source folder ''{0}'' cannot output to distinct source folder ''{1}''.
classpath.cannotUseLibraryAsOutput = Source folder ''{0}'' cannot output to library ''{1}''.
classpath.closedProject = Required project: {0} needs to be open.
classpath.couldNotWriteClasspathFile = Could not write ''{0}/.classpath'': {1}
classpath.cycle = A cycle was detected in the classpath of project: {0}
classpath.duplicateEntryPath = Classpath contains duplicate entry: {0}
classpath.illegalContainerPath = Illegal classpath container path: ''{0}'', must have at least one segment (containerID+hints).
classpath.illegalEntryInClasspathFile = Illegal entry in ''{0}/.classpath'' file: {1}
classpath.illegalLibraryPath = Illegal path for required library: ''{0}''.
classpath.illegalProjectPath = Illegal path for required project: ''{0}''.
classpath.illegalSourceFolderPath = Illegal path for required source folder: ''{0}''.
classpath.illegalVariablePath = Illegal classpath variable path: ''{0}'', must have at least one segment.
classpath.invalidClasspathInClasspathFile = Invalid classpath in ''{0}/.classpath'' file: {1}
classpath.invalidContainer = Invalid classpath container: {0}
classpath.mustEndWithSlash = End exclusion filter ''{0}'' with / to fully exclude ''{1}''.
classpath.unboundContainerPath = Unbound classpath container: ''{0}''.
classpath.unboundLibrary = Missing required library: ''{0}''.
classpath.unboundProject = Missing required Java project: {0}.
classpath.settingOutputLocationProgress = Setting output location for: ''{0}''
classpath.settingProgress = Setting classpath for: {0}
classpath.unboundSourceAttachment = Invalid source attachment: ''{0}'' for required library ''{1}''.
classpath.unboundSourceFolder = Missing required source folder: ''{0}''.
classpath.unboundVariablePath = Unbound classpath variable: ''{0}''.
classpath.unknownKind = Unknown kind: {0}
classpath.xmlFormatError = XML format error in ''{0}/.classpath'' file: {1}
classpath.disabledExclusionPatterns = Exclusion patterns are disabled, cannot exclude from entry: ''{0}''.
classpath.disabledMultipleOutputLocations = Multiple output locations are disabled, cannot associate entry: ''{0}'' with a specific output.

### miscellaneous
file.notFound = File not found: ''{0}''.
file.badFormat = Bad format.
variable.badFormat = Bad format for variables.
option.badFormat = Bad format for options.
path.nullPath = Path cannot be null.
path.mustBeAbsolute = Path must be absolute.
cache.invalidLoadFactor = Incorrect load factor

### code assist
codeAssist.nullRequestor = Requestor cannot be null.

### java conventions
convention.unit.nullName = Compilation unit name must not be null.
convention.unit.notJavaName = Compilation unit name must end with .java.
convention.classFile.nullName = .class file name must not be null.
convention.classFile.notJavaName = .class file name must end with .class.
convention.illegalIdentifier = ''{0}'' is not a valid Java identifier.
convention.import.nullImport = An import declaration must not be null.
convention.import.unqualifiedImport = An import declaration must not end with an unqualified *.
convention.type.nullName = A Java type name must not be null.
convention.type.nameWithBlanks = A Java type name must not start or end with a blank.
convention.type.dollarName = By convention, Java type names usually don''t contain the $ character.
convention.type.lowercaseName = By convention, Java type names usually start with an uppercase letter.
convention.type.invalidName = The type name ''{0}'' is not a valid identifier.
convention.package.nullName = A package name must not be null.
convention.package.emptyName = A package name must not be empty.
convention.package.dotName = A package name cannot start or end with a dot.
convention.package.nameWithBlanks = A package name must not start or end with a blank.
convention.package.consecutiveDotsName = A package name must not contain two consecutive dots.
convention.package.uppercaseName = By convention, package names usually start with a lowercase letter.

### DOM
dom.cannotDetail = Unable to generate detailed source indexes.
dom.nullTypeParameter = Cannot add parameter with null type
dom.nullNameParameter = Cannot add parameter with null name
dom.nullReturnType = Return type cannot be null
dom.nullExceptionType = Cannot add null exception
dom.mismatchArgNamesAndTypes = Types and names must have identical length
dom.addNullChild = Attempt to add null child
dom.addIncompatibleChild = Attempt to add child of incompatible type
dom.addChildWithParent = Attempt to add child that is already parented
dom.unableAddChild = Attempt to add child to node that cannot have children
dom.addAncestorAsChild = Attempt to add ancestor as child
dom.addNullSibling = Attempt to insert null sibling
dom.addSiblingBeforeRoot = Attempt to insert sibling before root node
dom.addIncompatibleSibling = Attempt to insert sibling of incompatible type
dom.addSiblingWithParent = Attempt to insert sibling that is already parented
dom.addAncestorAsSibling = Attempt to insert ancestor as sibling
dom.addNullInterface = Cannot add null interface
dom.nullInterfaces = Illegal to set super interfaces to null

### eval
eval.needBuiltState = Cannot evaluate if the project has not been built once

### correction
correction.nullRequestor = Requestor cannot be null.
correction.nullUnit = Compilation unit cannot be null.

### JDT Adapter
ant.jdtadapter.info.usingJdtCompiler = Using JDT compiler
ant.jdtadapter.error.missingJDTCompiler = Cannot find the JDT compiler
ant.jdtadapter.error.missingJRELIB = Cannot bind the JRE_LIB variable. To solve this problem, you can either set the JRE_LIB variable or use the bootclasspath parameter in your ant javac task
ant.jdtadapter.error.ignoringMemoryInitialSize= Since fork is false, ignoring memoryInitialSize setting
ant.jdtadapter.error.ignoringMemoryMaximumSize= Since fork is false, ignoring memoryMaximumSize setting
ant.jdtadapter.error.compilationFailed = Compilation failed. Compiler errors are available in {0}