/*
 * SavingThrowDialog.java
 *
 * Created on July 10, 2003, 6:49 PM
 */

package plugin.initiative.gui;

import gmgen.plugin.Combatant;
import gmgen.plugin.Dice;
import gmgen.plugin.PcgCombatant;
import gmgen.plugin.PlayerCharacterOutput;
import gmgen.plugin.SystemAttribute;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import pcgen.core.PlayerCharacter;
import pcgen.core.SystemCollections;
import plugin.initiative.XMLCombatant;
/**
 *
 * @author  soulcatcher
 */
public class SavingThrowDialog extends javax.swing.JDialog {

	public static int NULL_SAVE = 0;
	public static int FORT_SAVE = 1;
	public static int REF_SAVE = 2;
	public static int WILL_SAVE = 3;

	public static int CANCEL_OPTION = 0;
	public static int PASS_OPTION = 1;
	public static int FAIL_OPTION = 2;

	private Combatant cbt;
	private int retValue = CANCEL_OPTION;
	private int lastRoll = 0;


	/** Creates new form SavingThrowDialog */
	public SavingThrowDialog(java.awt.Frame parent, boolean modal, Combatant cbt) {
		this(parent, modal, cbt, 0, NULL_SAVE);
	}

	public SavingThrowDialog(java.awt.Frame parent, boolean modal, Combatant cbt, int dc, int saveType) {
		super(parent, modal);
		initComponents();
		this.cbt = cbt;
		setLocation(parent.getX() + 100, parent.getY() + 100);
		setCharacterName(cbt);
		setSaveType(dc, saveType);
		setDefaults(saveType);
	}

	public int getReturnValue() {
		return retValue;
	}

	public int getRoll() {
		return lastRoll;
	}

	public int getTotal() {
		return getFieldValue(saveTotal);
	}

	public int getDC() {
		return getFieldValue(saveDC);
	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	private void initComponents() {//GEN-BEGIN:initComponents
		java.awt.GridBagConstraints gridBagConstraints;

		saveTypeGroup = new javax.swing.ButtonGroup();
		jPanel1 = new javax.swing.JPanel();
		rollButton = new javax.swing.JButton();
		passButton = new javax.swing.JButton();
		failButton = new javax.swing.JButton();
		cancelButton = new javax.swing.JButton();
		jPanel2 = new javax.swing.JPanel();
		jLabel1 = new javax.swing.JLabel();
		saveBase = new javax.swing.JTextField();
		jLabel2 = new javax.swing.JLabel();
		saveAbility = new javax.swing.JTextField();
		jLabel3 = new javax.swing.JLabel();
		saveMagic = new javax.swing.JTextField();
		jLabel4 = new javax.swing.JLabel();
		saveMisc = new javax.swing.JTextField();
		jLabel5 = new javax.swing.JLabel();
		saveTemp = new javax.swing.JTextField();
		jLabel6 = new javax.swing.JLabel();
		saveTotal = new javax.swing.JTextField();
		saveTempSlider = new javax.swing.JSlider();
		saveMagicSlider = new javax.swing.JSlider();
		saveDCSlider = new javax.swing.JSlider();
		jLabel7 = new javax.swing.JLabel();
		saveDC = new javax.swing.JTextField();
		jLabel8 = new javax.swing.JLabel();
		jSeparator1 = new javax.swing.JSeparator();
		jLabel9 = new javax.swing.JLabel();
		jPanel3 = new javax.swing.JPanel();
		fortitudeSelection = new javax.swing.JRadioButton();
		reflexSelection = new javax.swing.JRadioButton();
		willSelection = new javax.swing.JRadioButton();
		characterName = new javax.swing.JLabel();

		setTitle("Saving Throw");
		addWindowListener(new java.awt.event.WindowAdapter() {
			public void windowClosing(java.awt.event.WindowEvent evt) {
				closeDialog(evt);
			}
		});

		jPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

		rollButton.setText("Roll");
		rollButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				rollButtonActionPerformed(evt);
			}
		});

		jPanel1.add(rollButton);

		passButton.setText("Pass");
		passButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				passButtonActionPerformed(evt);
			}
		});

		jPanel1.add(passButton);

		failButton.setText("Fail");
		failButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				failButtonActionPerformed(evt);
			}
		});

		jPanel1.add(failButton);

		cancelButton.setText("Cancel");
		cancelButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				cancelButtonActionPerformed(evt);
			}
		});

		jPanel1.add(cancelButton);

		getContentPane().add(jPanel1, java.awt.BorderLayout.SOUTH);

		jPanel2.setLayout(new java.awt.GridBagLayout());

		jLabel1.setText("Base Save");
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 2;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
		gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
		jPanel2.add(jLabel1, gridBagConstraints);

		saveBase.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				calculateActionPerformed(evt);
			}
		});

		saveBase.addFocusListener(new java.awt.event.FocusAdapter() {
			public void focusLost(java.awt.event.FocusEvent evt) {
				saveFocusLost(evt);
			}
		});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 2;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
		jPanel2.add(saveBase, gridBagConstraints);

		jLabel2.setText("Ability Modifier");
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 3;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
		gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
		jPanel2.add(jLabel2, gridBagConstraints);

		saveAbility.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				calculateActionPerformed(evt);
			}
		});

		saveAbility.addFocusListener(new java.awt.event.FocusAdapter() {
			public void focusLost(java.awt.event.FocusEvent evt) {
				saveFocusLost(evt);
			}
		});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 3;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
		jPanel2.add(saveAbility, gridBagConstraints);

		jLabel3.setText("Magic Modifier");
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 4;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
		gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
		jPanel2.add(jLabel3, gridBagConstraints);

		saveMagic.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				calculateActionPerformed(evt);
			}
		});

		saveMagic.addFocusListener(new java.awt.event.FocusAdapter() {
			public void focusLost(java.awt.event.FocusEvent evt) {
				saveFocusLost(evt);
			}
		});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 4;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
		jPanel2.add(saveMagic, gridBagConstraints);

		jLabel4.setText("Misc Modifier");
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 5;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
		gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
		jPanel2.add(jLabel4, gridBagConstraints);

		saveMisc.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				calculateActionPerformed(evt);
			}
		});

		saveMisc.addFocusListener(new java.awt.event.FocusAdapter() {
			public void focusLost(java.awt.event.FocusEvent evt) {
				saveFocusLost(evt);
			}
		});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 5;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
		jPanel2.add(saveMisc, gridBagConstraints);

		jLabel5.setText("Temp Modifier");
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 6;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
		gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
		jPanel2.add(jLabel5, gridBagConstraints);

		saveTemp.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				calculateActionPerformed(evt);
			}
		});

		saveTemp.addFocusListener(new java.awt.event.FocusAdapter() {
			public void focusLost(java.awt.event.FocusEvent evt) {
				saveFocusLost(evt);
			}
		});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 6;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
		jPanel2.add(saveTemp, gridBagConstraints);

		jLabel6.setText("Total");
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 7;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
		gridBagConstraints.insets = new java.awt.Insets(0, 5, 10, 5);
		jPanel2.add(jLabel6, gridBagConstraints);

		saveTotal.setBackground(new java.awt.Color(204, 204, 204));
		saveTotal.setEditable(false);
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 7;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
		jPanel2.add(saveTotal, gridBagConstraints);

		saveTempSlider.setMaximum(20);
		saveTempSlider.setValue(0);
		saveTempSlider.addKeyListener(new java.awt.event.KeyAdapter() {
			public void keyPressed(java.awt.event.KeyEvent evt) {
				calculateSliderKey(evt);
			}
			public void keyReleased(java.awt.event.KeyEvent evt) {
				calculateSliderKey(evt);
			}
			public void keyTyped(java.awt.event.KeyEvent evt) {
				calculateSliderKey(evt);
			}
		});

		saveTempSlider.addMouseListener(new java.awt.event.MouseAdapter() {
			public void mouseClicked(java.awt.event.MouseEvent evt) {
				calculateSlider(evt);
			}
			public void mousePressed(java.awt.event.MouseEvent evt) {
				calculateSlider(evt);
			}
			public void mouseReleased(java.awt.event.MouseEvent evt) {
				calculateSlider(evt);
			}
		});

		saveTempSlider.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
			public void mouseDragged(java.awt.event.MouseEvent evt) {
				calculateSlider(evt);
			}
			public void mouseMoved(java.awt.event.MouseEvent evt) {
				calculateSlider(evt);
			}
		});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 2;
		gridBagConstraints.gridy = 6;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
		gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 2);
		jPanel2.add(saveTempSlider, gridBagConstraints);

		saveMagicSlider.setMaximum(20);
		saveMagicSlider.setValue(0);
		saveMagicSlider.addKeyListener(new java.awt.event.KeyAdapter() {
			public void keyPressed(java.awt.event.KeyEvent evt) {
				calculateSliderKey(evt);
			}
			public void keyReleased(java.awt.event.KeyEvent evt) {
				calculateSliderKey(evt);
			}
			public void keyTyped(java.awt.event.KeyEvent evt) {
				calculateSliderKey(evt);
			}
		});

		saveMagicSlider.addMouseListener(new java.awt.event.MouseAdapter() {
			public void mouseClicked(java.awt.event.MouseEvent evt) {
				calculateSlider(evt);
			}
			public void mousePressed(java.awt.event.MouseEvent evt) {
				calculateSlider(evt);
			}
			public void mouseReleased(java.awt.event.MouseEvent evt) {
				calculateSlider(evt);
			}
		});

		saveMagicSlider.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
			public void mouseDragged(java.awt.event.MouseEvent evt) {
				calculateSlider(evt);
			}
			public void mouseMoved(java.awt.event.MouseEvent evt) {
				calculateSlider(evt);
			}
		});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 2;
		gridBagConstraints.gridy = 4;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
		gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 2);
		jPanel2.add(saveMagicSlider, gridBagConstraints);

		saveDCSlider.setMaximum(50);
		saveDCSlider.setMinimum(1);
		saveDCSlider.setValue(1);
		saveDCSlider.addKeyListener(new java.awt.event.KeyAdapter() {
			public void keyPressed(java.awt.event.KeyEvent evt) {
				saveDCSliderKey(evt);
			}
			public void keyReleased(java.awt.event.KeyEvent evt) {
				saveDCSliderKey(evt);
			}
			public void keyTyped(java.awt.event.KeyEvent evt) {
				saveDCSliderKey(evt);
			}
		});

		saveDCSlider.addMouseListener(new java.awt.event.MouseAdapter() {
			public void mouseClicked(java.awt.event.MouseEvent evt) {
				saveDCSlider(evt);
			}
			public void mousePressed(java.awt.event.MouseEvent evt) {
				saveDCSlider(evt);
			}
			public void mouseReleased(java.awt.event.MouseEvent evt) {
				saveDCSlider(evt);
			}
		});

		saveDCSlider.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
			public void mouseDragged(java.awt.event.MouseEvent evt) {
				saveDCSlider(evt);
			}
			public void mouseMoved(java.awt.event.MouseEvent evt) {
				saveDCSlider(evt);
			}
		});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 2;
		gridBagConstraints.gridy = 9;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
		gridBagConstraints.insets = new java.awt.Insets(10, 5, 0, 2);
		jPanel2.add(saveDCSlider, gridBagConstraints);

		jLabel7.setText("Difficulty Class");
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 9;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
		gridBagConstraints.insets = new java.awt.Insets(10, 5, 0, 5);
		jPanel2.add(jLabel7, gridBagConstraints);

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 9;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHWEST;
		jPanel2.add(saveDC, gridBagConstraints);

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 1;
		gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
		jPanel2.add(jLabel8, gridBagConstraints);

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 8;
		gridBagConstraints.gridwidth = 3;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 0);
		jPanel2.add(jSeparator1, gridBagConstraints);

		jLabel9.setText("Save Type");
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 10;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
		gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
		jPanel2.add(jLabel9, gridBagConstraints);

		jPanel3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

		fortitudeSelection.setText("Fortitude");
		saveTypeGroup.add(fortitudeSelection);
		fortitudeSelection.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				saveSelectedActionPerformed(evt);
			}
		});

		jPanel3.add(fortitudeSelection);

		reflexSelection.setText("Reflex");
		saveTypeGroup.add(reflexSelection);
		reflexSelection.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				saveSelectedActionPerformed(evt);
			}
		});

		jPanel3.add(reflexSelection);

		willSelection.setText("Will");
		saveTypeGroup.add(willSelection);
		willSelection.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				saveSelectedActionPerformed(evt);
			}
		});

		jPanel3.add(willSelection);

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 2;
		gridBagConstraints.gridy = 10;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
		gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 2);
		jPanel2.add(jPanel3, gridBagConstraints);

		characterName.setFont(new java.awt.Font("Dialog", 1, 14));
		characterName.setText(" ");
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.gridwidth = 3;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
		gridBagConstraints.insets = new java.awt.Insets(0, 5, 10, 0);
		jPanel2.add(characterName, gridBagConstraints);

		getContentPane().add(jPanel2, java.awt.BorderLayout.WEST);

		pack();
	}//GEN-END:initComponents

	private void saveFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_saveFocusLost
		calculate();
	}//GEN-LAST:event_saveFocusLost

	private void calculateSliderKey(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_calculateSliderKey
		if(evt.getSource() == saveMagicSlider) {
			saveMagic.setText(saveMagicSlider.getValue() + "");
		}
		else if(evt.getSource() == saveTempSlider) {
			saveTemp.setText(saveTempSlider.getValue() + "");
		}
		calculate();
	}//GEN-LAST:event_calculateSliderKey

	private void calculateSlider(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_calculateSlider
		if(evt.getSource() == saveMagicSlider) {
			saveMagic.setText(saveMagicSlider.getValue() + "");
		}
		else if(evt.getSource() == saveTempSlider) {
			saveTemp.setText(saveTempSlider.getValue() + "");
		}
		calculate();
	}//GEN-LAST:event_calculateSlider

	private void saveDCSliderKey(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_saveDCSliderKey
		saveDC.setText(saveDCSlider.getValue() + "");
	}//GEN-LAST:event_saveDCSliderKey

	private void saveDCSlider(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_saveDCSlider
		saveDC.setText(saveDCSlider.getValue() + "");
	}//GEN-LAST:event_saveDCSlider

	private void saveSelectedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveSelectedActionPerformed
		setDefaults(getSaveType());
	}//GEN-LAST:event_saveSelectedActionPerformed

	private void calculateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_calculateActionPerformed
		calculate();
	}//GEN-LAST:event_calculateActionPerformed

	private void rollButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rollButtonActionPerformed
		int total = getFieldValue(saveTotal);
		int dc = getFieldValue(saveDC);
		int roll = new Dice(1, 20).roll();
		if(total + roll >= dc) {
			retValue = PASS_OPTION;
			JOptionPane.showMessageDialog(this, getSaveAbbrev(getSaveType()) + " DC "+ dc + " Passed.  Save: " + total + " + Roll: " + roll + " = " + (total + roll), "Save Passed", JOptionPane.INFORMATION_MESSAGE);
		}
		else {
			retValue = FAIL_OPTION;
			JOptionPane.showMessageDialog(this, getSaveAbbrev(getSaveType()) + " DC "+ dc + " Failed.  Save: " + total + " + Roll: " + roll + " = " + (total + roll), "Save Failed", JOptionPane.INFORMATION_MESSAGE);
		}
		this.lastRoll = roll;
		setVisible(false);
		dispose();
	}//GEN-LAST:event_rollButtonActionPerformed

	private void passButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_passButtonActionPerformed
		retValue = PASS_OPTION;
		setVisible(false);
		dispose();
	}//GEN-LAST:event_passButtonActionPerformed

	private void failButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_failButtonActionPerformed
		retValue = FAIL_OPTION;
		setVisible(false);
		dispose();
	}//GEN-LAST:event_failButtonActionPerformed

	private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
		retValue = CANCEL_OPTION;
		setVisible(false);
		dispose();
	}//GEN-LAST:event_cancelButtonActionPerformed

	/** Closes the dialog */
	private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
		setVisible(false);
		dispose();
	}//GEN-LAST:event_closeDialog

	private void calculate() {
		int total = 0;
		total += getFieldValue(saveBase);
		total += getFieldValue(saveAbility);
		total += getFieldValue(saveMagic);
		total += getFieldValue(saveMisc);
		total += getFieldValue(saveTemp);
		saveTotal.setText(total + "");
		setXMLCache(total);
	}

	private void setCharacterName(Combatant cbt) {
		setCharacterName(cbt.getName());
	}

	private void setXMLCache(int total) {
		if(cbt instanceof XMLCombatant) {
			XMLCombatant xmlcbt = (XMLCombatant)cbt;
			if(getSaveType() == FORT_SAVE) {
				xmlcbt.setSave("Fortitude", total);
			}
			else if(getSaveType() == REF_SAVE) {
				xmlcbt.setSave("Reflex", total);
			}
			else if(getSaveType() == WILL_SAVE) {
				xmlcbt.setSave("Will", total);
			}
		}
	}

	private void setCharacterName(String name) {
		characterName.setText(name);
	}

	private void setDefaults(int saveType) {
		int base = 0;
		int ability = 0;
		int magic = 0;
		int misc = 0;
		if(cbt instanceof PcgCombatant) {
			PcgCombatant pcgcbt = (PcgCombatant)cbt;
			PlayerCharacter pc = pcgcbt.getPC();
			PlayerCharacterOutput pcOut = new PlayerCharacterOutput(pc);
			if(saveType == FORT_SAVE) {
				base = pc.calculateSaveBonus(1, SystemCollections.getUnmodifiableCheckList().get(0).toString(), "BASE");
				ability = pc.calculateSaveBonus(1, SystemCollections.getUnmodifiableCheckList().get(0).toString(), "STATMOD");
				magic = pc.calculateSaveBonus(1, SystemCollections.getUnmodifiableCheckList().get(0).toString(), "MAGIC");
				misc = pc.calculateSaveBonus(1, SystemCollections.getUnmodifiableCheckList().get(0).toString(), "MISC.NOMAGIC.NOSTAT");
			}
			else if(saveType == REF_SAVE) {
				base = pc.calculateSaveBonus(2, SystemCollections.getUnmodifiableCheckList().get(1).toString(), "BASE");
				ability = pc.calculateSaveBonus(2, SystemCollections.getUnmodifiableCheckList().get(1).toString(), "STATMOD");
				magic = pc.calculateSaveBonus(2, SystemCollections.getUnmodifiableCheckList().get(1).toString(), "MAGIC");
				misc = pc.calculateSaveBonus(2, SystemCollections.getUnmodifiableCheckList().get(1).toString(), "MISC.NOMAGIC.NOSTAT");
			}
			else if(saveType == WILL_SAVE) {
				base = pc.calculateSaveBonus(3, SystemCollections.getUnmodifiableCheckList().get(2).toString(), "BASE");
				ability = pc.calculateSaveBonus(3, SystemCollections.getUnmodifiableCheckList().get(2).toString(), "STATMOD");
				magic = pc.calculateSaveBonus(3, SystemCollections.getUnmodifiableCheckList().get(2).toString(), "MAGIC");
				misc = pc.calculateSaveBonus(3, SystemCollections.getUnmodifiableCheckList().get(2).toString(), "MISC.NOMAGIC.NOSTAT");
			}
		}
		else if(cbt instanceof XMLCombatant) {
			XMLCombatant xmlcbt = (XMLCombatant)cbt;
			if(saveType == FORT_SAVE) {
				int mod = new SystemAttribute("Constitution", xmlcbt.getAttribute("Constitution")).getModifier();
				ability = mod;
				base = xmlcbt.getSave("Fortitude") - mod;
			}
			else if(saveType == REF_SAVE) {
				int mod = new SystemAttribute("Dexterity", xmlcbt.getAttribute("Dexterity")).getModifier();
				ability = mod;
				base = xmlcbt.getSave("Reflex") - mod;
			}
			else if(saveType == WILL_SAVE) {
				int mod = new SystemAttribute("Wisdom", xmlcbt.getAttribute("Wisdom")).getModifier();
				ability = mod;
				base = xmlcbt.getSave("Will") - mod;
			}
			magic = parseInt(saveMagic.getText());
			misc = parseInt(saveMisc.getText());
		}
		setDefaults(base, ability, magic, misc, parseInt(saveTemp.getText()));
	}

	private void setDefaults(int base, int ability, int magic, int misc, int temp) {
		saveBase.setText(base + "");
		saveAbility.setText(ability + "");
		saveMagic.setText(magic + "");
		saveMisc.setText(misc + "");
		saveTemp.setText(temp + "");
		calculate();
	}

	private void setSaveType(int dc, int saveType) {
		saveDCSlider.setValue(dc);
		saveDC.setText(dc + "");
		if(saveType == FORT_SAVE) {
			fortitudeSelection.setSelected(true);
		}
		else if(saveType == REF_SAVE) {
			reflexSelection.setSelected(true);
		}
		else if(saveType == WILL_SAVE) {
			willSelection.setSelected(true);
		}
	}

	private int getFieldValue(JTextField field) {
		try {
			return new Integer(field.getText()).intValue();
		}
		catch(NumberFormatException e) {
			field.setText("0");
		}
		return 0;
	}

	private int parseInt(String number) {
		try {
			return new Integer(number).intValue();
		}
		catch(NumberFormatException e) {
		}
		return 0;
	}

	public int getSaveType() {
		if(fortitudeSelection.isSelected()) {
			return FORT_SAVE;
		}
		else if(reflexSelection.isSelected()) {
			return REF_SAVE;
		}
		else if(willSelection.isSelected()) {
			return WILL_SAVE;
		}
		return NULL_SAVE;
	}

	public String getSaveAbbrev(int save) {
		if(save == FORT_SAVE) {
			return "Fort";
		}
		else if(save == REF_SAVE) {
			return "Ref";
		}
		else if(save == WILL_SAVE) {
			return "Will";
		}
		return "";
	}

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JLabel jLabel8;
  private javax.swing.JLabel jLabel4;
  private javax.swing.JTextField saveTemp;
  private javax.swing.JTextField saveDC;
  private javax.swing.JLabel jLabel1;
  private javax.swing.JLabel characterName;
  private javax.swing.JLabel jLabel3;
  private javax.swing.JTextField saveTotal;
  private javax.swing.JRadioButton willSelection;
  private javax.swing.JSlider saveDCSlider;
  private javax.swing.JSlider saveMagicSlider;
  private javax.swing.JRadioButton fortitudeSelection;
  private javax.swing.JPanel jPanel3;
  private javax.swing.JButton rollButton;
  private javax.swing.JTextField saveAbility;
  private javax.swing.JLabel jLabel2;
  private javax.swing.ButtonGroup saveTypeGroup;
  private javax.swing.JButton failButton;
  private javax.swing.JPanel jPanel2;
  private javax.swing.JLabel jLabel9;
  private javax.swing.JTextField saveMagic;
  private javax.swing.JButton cancelButton;
  private javax.swing.JLabel jLabel7;
  private javax.swing.JTextField saveMisc;
  private javax.swing.JSeparator jSeparator1;
  private javax.swing.JButton passButton;
  private javax.swing.JPanel jPanel1;
  private javax.swing.JLabel jLabel6;
  private javax.swing.JSlider saveTempSlider;
  private javax.swing.JTextField saveBase;
  private javax.swing.JRadioButton reflexSelection;
  private javax.swing.JLabel jLabel5;
  // End of variables declaration//GEN-END:variables

}
