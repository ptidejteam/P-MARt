<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
    "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
  <title>MapperXML: Application Architecture</title>
  <link href="common/style.css" rel="stylesheet" type="text/css">
</head>

<body>

<table width="100%" border="0" cellpadding="10" cellspacing="0"
style="page-break-before: always">
  <tbody>
    <tr valign="top">
      <td colspan="2" bgcolor="#e6e6ff"><img src="common/mapperlogo.gif"
        name="Graphic1" alt="Mapper Logo" align="bottom" width="500"
        height="115" border="0"></td>
    </tr>
    <tr>
      <td colspan="2" width="100%" valign="top" bgcolor="#0000ff"
      style="font-size: 3pt">.</td>
    </tr>
    <tr valign="top">
      <td width="15%" bgcolor="#9999cc">
        <div class="leftnav">
        <!--#include virtual="common/leftnavmain.shtml" -->
        </div>
      </td>
      <td width="85%">
        <h1>2. Application Architecture</h1>
        <p>
        <center>
        <img src="media/MapperXMLApplication.gif" alt="Application Architecture">
        <br/>
        figure 2.1 - MapperXML Application Architecture
        </center>
        </p>

        <h2>2.1 ServletApp</h2>
        <p>The top component in a MapperXML application is the ServletApp. All requests
        go through the ServletApp. The ServletApp in turn, delegates the work of
        servicing the request to a ServletForm.</p>

        <p>You will typically subclass com.taursys.servlet.ServletApp to build
        a new application. Use of the ServletApp, however, is not required for
        building a MapperXML applications. You can implement your own version of
        the ServletApp.</p>

        <p>The core method of the ServletApp is the doGet method. This method also
        services requests for the doPost method. In the doGet method, the ServletApp
        inspects the request's path information to decide which ServletForm should
        handle the request. It then invokes the doGet method of the appropriate
        ServletForm. The ServletApp actually uses a ServletFormFactory to do much
        of this work,
        </p>
        <p>The following code is an extract from the ServletApp's doGet method:</p>
        <pre>
  public void doGet(HttpServletRequest request, HttpServletResponse response)
      throws ServletException, IOException {
    // Determine the Presentation Manager
    try {
      ServletForm form = factory.createServletForm(request.getPathInfo());
      try {
        form.doGet(request, response);
      }
      catch (Exception ex) {
        throw new ServletException("Unhandled Exception in ServletForm: "
            + ex.getMessage(), ex);
      } finally {
        factory.recycle(form);
      }
    }
    catch (ServletFormNotFoundException ex) {
      // throw 404
      response.sendError(HttpServletResponse.SC_NOT_FOUND,
        "The requested ServletForm was not found.  If you typed the url, please "
        + "check to be sure it is correct.  It is also possible that the system "
        + "that provides this resource is temporarily unavailable.&lt;br/&gt;&lt;hr/&gt;"
        + "Internal error message: " + ex.getMessage() + ").");
    }
  }
        </pre>
        <p>The core process is very simple. The ServletApp asks the ServletFormFactory
        for the appropriate ServletForm. If that cannot be found, a 404 response
        is sent. If found, the request is sent the the ServletForm's doGet
        method. If an Exception occurs in the ServletForm, a ServletException is
        thrown with the cause attached. Finally the ServletForm is recycled (more
        on recycling below).
        </p>
        <h2>2.2 ServletFormFactory</h2>
        <h2>2.3 Sharing Application Resources</h2>
      </td>
    </tr>
    <tr>
      <td colspan="2" width="100%" valign="top" bgcolor="#9999ff"
      style="font-size: 3pt">.</td>
    </tr>
  </tbody>
</table>

<div class="footer">
<!--#include virtual="common/footer.shtml" -->
</div>
</body>
</html>
