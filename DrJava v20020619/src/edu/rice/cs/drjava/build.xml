<?xml version="1.0"?>

<!DOCTYPE project [
  <!ENTITY build-common SYSTEM "file:../build-common.xml">
]>

<!--
  $Id: build.xml,v 1.1 2005/08/05 12:45:56 guehene Exp $
-->
<project name="drjava" default="test">
  <!-- srcroot is the base directory of the source, 4 packages back -->
  <property name="srcroot" value="${basedir}/../../../.." />

  <!-- built is where the compiled classes go -->
  <property name="built" value="${srcroot}/../built/" />

  <!-- dist is where the packaged jars go -->
  <property name="dist" value="${srcroot}/../dist/" />

  <!-- projpath is the path from srcroot to the root directory of this project
  -->
  <property name="projpath" value="edu/rice/cs/${ant.project.name}" />

  <!-- put a jar in this directory after each commit -->
  <property name="jars_dir" value="/home/javaplt/public_html/drjava/builds" />

  <!-- put new javadoc in this directory after each commit -->
  <property name="public_javadoc_dir" value="/home/javaplt/public_html/javadoc/${ant.project.name}" />

  <!-- put javadoc in this directory if generating private javadoc -->
  <property name="private_javadoc_dir" value="${srcroot}/../javadoc/${ant.project.name}" />

  <property name="jarfile" value="${srcroot}/../drjava.jar" />
  <property name="manifest" value="manifest" />

  <!-- include standard build file parts -->
  &build-common;

  <!-- generate jar and javadoc
       Requires version-tag to be set (via command line -Dversion-tag=)
       For example, to release drjava-20020101-0000, you'd type:

       ant -Dversion-tag=drjava-20020101-0000 release
  -->
  <target name="release" if="version-tag" depends="update,compile">
    <delete dir="${dist}/${version-tag}" />
    <mkdir dir="${dist}/${version-tag}" />

    <!-- generate javadoc for the committed version! -->
    <antcall target="generate_javadoc">
      <param name="javadoc_dir" value="${dist}/${version-tag}/javadoc" />
      <param name="javadoc_title" value="${version-tag}" />
    </antcall>

    <zip zipfile="${dist}/${version-tag}-javadoc.zip">
      <fileset dir="${dist}">
        <include name="${version-tag}/javadoc/**" />
      </fileset>
    </zip>

    <delete dir="${dist}/${version-tag}/javadoc" />

    <cvs dest="${dist}/${version-tag}"
         tag="HEAD"
         quiet="yes"
         package="src/edu/rice/cs/drjava"
         command="export -N" />

    <cvs dest="${dist}/${version-tag}"
         tag="HEAD"
         quiet="yes"
         package="src/edu/rice/cs/util"
         command="export -N" />

    <cvs dest="${dist}/${version-tag}"
         tag="HEAD"
         quiet="yes"
         package="src/edu/rice/cs/lib"
         command="export -N" />

    <zip zipfile="${dist}/${version-tag}-src.zip">
      <fileset dir="${dist}">
        <include name="${version-tag}/src/**" />
      </fileset>
    </zip>

    <delete dir="${dist}/${version-tag}" />

    <antcall target="jar">
      <param name="jarfile" value="${dist}/${version-tag}.jar" />
    </antcall>
  </target>

  <target name="compile" depends="do-compile">
    <rmic base="${built}"
          classname="edu.rice.cs.drjava.model.repl.newjvm.InterpreterJVM" />

    <rmic base="${built}"
          classname="edu.rice.cs.drjava.model.repl.newjvm.MainJVM" />

    <copy todir="${built}">
      <fileset dir="${srcroot}">
        <include name="${projpath}/**/LICENSE" />
        <include name="${projpath}/**/*.gif" />
      </fileset>
    </copy>

  </target>

  <!-- Makes a jar with dependencies. No tests are included. -->
  <target name="jar">
    <!-- copy external dependencies -->
    <zip zipfile="${jarfile}">
      <zipfileset src="${lib_dir}/gj-util.jar" />
      <zipfileset src="${lib_dir}/dynamicjava.jar" />
      <zipfileset src="${lib_dir}/junit.jar" />
    </zip>

    <jar jarfile="${jarfile}" manifest="${manifest}" update="true" >
      <fileset dir="${built}" excludes="**/*Test.class">
        <include name="${projpath}/**" />
        <include name="edu/rice/cs/util/**" />
      </fileset>
    </jar>
  </target>

  <!-- Run the program! -->
  <target name="run" depends="compile">
    <java fork="true" classname="edu.rice.cs.drjava.DrJava">
      <classpath refid="classpath" />
    </java>
  </target>

</project>
